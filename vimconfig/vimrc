" vim: set foldmethod=marker:
" Author: Austin Smith <auwsmit@gmail.com>
" Source: https://github.com/auwsmit/dotfiles
" Best viewed with vim's folds (see :help folds)

" STARTUP {{{

let s:is_windows = (has('win32')  || has('win64'))
let s:has_python = (has('python') || has('python3'))

" detect .vim directory
let g:myvimdir ="~/.vim"
if s:is_windows
  let g:myvimdir ="~/vimfiles"
elseif has('nvim')
  let g:myvimdir ="~/.config/nvim"
endif
let g:myvimdir = expand(g:myvimdir)

" }}}
" PLUGINS {{{
" plugin config files can be found under g:myvimdir/plugin_configs
" press <Enter> on a line below to goto its config file

" setup vim-plug
call plug#begin()

" FILE/BUFFER PLUGINS {{{

Plug 'tpope/vim-eunuch'     " shell commands, e.g. :Remove & :Move & :Chmod
Plug 'tpope/vim-fugitive'   " vim + git integration
" Plug 'yegappan/mru'         " most recent file list
Plug 'auwsmit/mru', { 'branch': 'split-in-current-window' }
" Plug 'Y:\Git\mru'
Plug 'justinmk/vim-gtfo'    " open gui explorer or terminal
if has('nvim')
  Plug 'stevearc/oil.nvim'    " minimal file explorer++
else
  Plug 'justinmk/vim-dirvish' " minimal file explorer
endif
Plug 'preservim/nerdtree',  " file tree viewer
      \ { 'on': ['NERDTreeToggle', 'NERDTreeFind', 'NERDTree'] }
Plug 'junegunn/fzf',        " general fuzzy finder
      \ { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'     " fzf + vim integration
Plug 'mhinz/vim-sayonara', { 'on': 'Sayonara' } " simple buffer/window closing
Plug 'majutsushi/Tagbar',  { 'on': 'TagbarToggle' } " tag explorer
if has('nvim')
  Plug 'nvim-lua/plenary.nvim'
  Plug 'ThePrimeagen/harpoon', { 'branch': 'harpoon2' }
endif
" Plug 'Y:\Git\vim-spear'
Plug 'auwsmit/vim-spear'

" }}}
" OPERATOR PLUGINS {{{

Plug 'tpope/vim-commentary'   " comment mappings
Plug 'machakann/vim-sandwich' " modify surrounding text eg: () and ''
Plug 'tommcdo/vim-exchange'   " exchange two pieces of text

" }}}
" TEXT OBJECT PLUGINS {{{

Plug 'kana/vim-niceblock'
Plug 'kana/vim-textobj-user'         |
      \ Plug 'kana/vim-textobj-line'  |
      \ Plug 'kana/vim-textobj-entire' |
      \ Plug 'kana/vim-textobj-indent'  |
      \ Plug 'kana/vim-textobj-function' |
      \ Plug 'coderifous/textobj-word-column.vim'
Plug 'junegunn/vim-after-object'

" " }}}
" MOTION/NAVIGATION PLUGINS {{{

Plug 'chaoren/vim-wordmotion'    " makes vim's 'word's more precise
Plug 'justinmk/vim-ipmotion'     " { } move over folds

" TODO: fuse these three into one personal search plugin
" Plug 'romainl/vim-cool'          " auto-clear search highlight
Plug 'junegunn/vim-slash'        " improved search
Plug 'henrik/vim-indexed-search' " show total results (works on older versions of vim)

" " }}}
" SNIPPET/COMPLETION PLUGINS {{{

Plug 'ervandew/supertab'  " tab autocomplete
" if s:has_python
"   Plug 'SirVer/UltiSnips' " snippets manager
" endif

" }}}
" FORMAT/SYNTAX PLUGINS {{{

Plug 'nicwest/vim-camelsnek' " convert between camel and snake case
Plug 'justinmk/vim-syntax-extra', { 'for': ['c', 'cpp'] } " additional syntax highlighting for C/C++
Plug 'junegunn/vim-easy-align',   { 'on': ['<Plug>(EasyAlign)', 'EasyAlign'] } " align text operator
if has('nvim')
  " Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
endif

" " }}}
" APPEARANCE/UI PLUGINS {{{

Plug 'xtal8/traces.vim'           " previews patterns for ex commands
Plug 'auwsmit/baddoggo'           " personal fork of Bad Wolf by Steve Losh
Plug 'auwsmit/vim-active-numbers' " line numbers follow the current window
Plug 'itchyny/lightline.vim'      " prettier statusbar
Plug 'junegunn/goyo.vim',   { 'on': 'Goyo' } " distraction free editing
Plug 'Yggdroot/indentLine', { 'on': ['IndentLinesEnable', 'IndentLinesToggle'] } " indent indicators
Plug 'junegunn/rainbow_parentheses.vim', { 'on': 'RainbowParentheses' }

" }}}
" MISC/CONVENIENCE PLUGINS " {{{

if v:version > 800
  Plug 'romainl/vim-qf' " sensible quickfix improvements
endif
Plug 'junegunn/vim-peekaboo'    " preview registers
Plug 'tpope/vim-rsi'            " readline key maps for cmd and ins mode
Plug 'tpope/vim-repeat'         " allows plugins to . repeat easier
Plug 'tpope/vim-sleuth'         " auto-detect tab settings per-file
Plug 'tpope/vim-unimpaired'     " tons of useful [x/]x mappings
Plug 'Konfekt/FastFold'         " optimize how Vim updates folds
Plug 'farmergreg/vim-lastplace' " reopen files at last position
Plug 'xolox/vim-session'        " simplified session management
let g:session_autosave = 0      " no auto-save prompt on first install
Plug 'xolox/vim-misc'           " vim-session dependency
Plug 'junegunn/gv.vim', { 'on': 'GV' } " git commit browser
Plug 'mbbill/undotree', { 'on': 'UndotreeToggle' } " visual undo tree
if executable('ctags')
  Plug 'ludovicchabant/vim-gutentags' " auto-generate and update tags
endif

" }}}

" initialize vim-plug
call plug#end()

" Source plugin configs {{{
fun! SourcePluginConfigs()
  let configs = glob(g:myvimdir.'/plugin_configs/*',0,1)
  for config in configs
    let plugin_name = fnamemodify(config,':t')[:-5]
    let type = config[-3:]
    " skip lua configs for vim
    if !has('nvim') && type == 'lua'
      continue
    endif
    let slash = s:is_windows ? '\' : '/'
    let plugin_dir = ''
    " keep separate plugins for vim and nvim
    if has('nvim')
      let plugin_dir = stdpath('data').'/plugged/'.plugin_name
    else
      let plugin_dir = g:myvimdir.'/plugged/'.plugin_name
    endif
    let src = (type == 'vim') ? 'source ' : 'luafile '
    " if plugin is currently installed
    if isdirectory(plugin_dir)
      exec src . config
    endif
  endfor
endfun
call SourcePluginConfigs()
" }}}

" }}}
" GENERAL SETTINGS {{{

" sensible options for me
set hidden
set incsearch
set ignorecase
set smartcase
set autoread
set lazyredraw
set gdefault
set showcmd
set nostartofline
set path+=**
set modeline
set sidescroll=8
set backspace=indent,eol,start
set history=10000
set undolevels=10000
set complete=.,w,b,t
set synmaxcol=1024
set nrformats-=octal
set virtualedit=all
set sessionoptions-=options
set sessionoptions-=folds
set clipboard^=unnamedplus,unnamed
set foldopen-=block
set shortmess-=S
set shortmess+=F
silent! set mouse=a
set vb t_vb=
if exists('&belloff')
  set belloff=all
endif

if s:is_windows
  set makeprg=build.bat
  if executable('wsl')
    " windows has a good shell afterall. it just takes an
    " entire linux distro running through a compatibility layer :)
    set shell=wsl.exe
  endif
  if executable('grep')
    set grepprg=grep\ -n
  endif
endif

" command-line completion settings
set wildmenu
set wildmode=full
silent! set wildoptions+=fuzzy
set wildignore+=.hg,.git,.svn                    " Version control
set wildignore+=*.aux,*.out,*.toc                " LaTeX intermediate files
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg   " binary images
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
set wildignore+=*.spl                            " compiled spelling word lists
set wildignore+=*.sw?                            " Vim swap files
set wildignore+=*.DS_Store                       " OSX garbage

" backups, swapfiles, & undofiles in one place
let s:tempdir=expand(g:myvimdir .(has('nvim') ? '/neotmp/' : '/tmp/'))
if !isdirectory(s:tempdir)
  call mkdir(s:tempdir, 'p')
  call mkdir(s:tempdir.'backup', 'p')
  call mkdir(s:tempdir.'swap', 'p')
  call mkdir(s:tempdir.'undo', 'p')
endif
set backup
let &backupdir=s:tempdir .'backup//'
set swapfile
let &directory=s:tempdir .'swap//'
if has('persistent_undo')
  set undofile
  let &undodir=s:tempdir .'undo//'
endif


" Neovide config
if exists("g:neovide")
  let g:neovide_cursor_animation_length = 0
  let g:neovide_scroll_animation_length = 0
endif

" }}}
" APPEARANCE AND FORMATTING {{{
" some settings will be overwritten when certain filetypes are detected
" see: filetype-indent-on, ftplugins, & after-directory

" default tab settings (vim-sleuth will usually override this)
set smarttab
set shiftwidth=4 softtabstop=-1 expandtab

" indenting/formatting
set autoindent
set smartindent " TODO: try cindent
set encoding=utf-8

" mostly aesthetic options
set hlsearch
set cpoptions+=$
set foldlevel=999
set foldmethod=indent
set guioptions=
set laststatus=2
set linebreak
set list
set listchars=tab:»\ ,extends:›,precedes:‹,nbsp:·,trail:■
set cursorline
set number relativenumber
set numberwidth=1
set ruler
set splitright
set noshowmode
if has('linebreak')
  set showbreak=«
  set breakindent
else
  set listchars+=eol:¬
endif
if has('termguicolors')
  set termguicolors
endif
" Disable Background Color Erase (BCE) so that color schemes
" render properly when inside 256-color tmux and GNU screen.
if &term =~ '256color'
  set t_ut=
endif

if !has('nvim') && s:is_windows
  " fix weird cursor issues on windows terminals
  " needs to be after termguicolors and t_Co are set
  let &t_SI = "\e[6 q"
  let &t_SR = "\e[4 q"
  let &t_EI = "\e[2 q"
  let &t_ti .= "\e[1 q"
  let &t_te .= "\e[0 q"
endif

silent! set guifont=Fantasque\ Sans\ Mono:h10
if &guifont == ''
  set guifont=Consolas:h10
endif

silent! colorscheme baddoggo
fun! VimrcColorFallback(color) abort
  if !exists('g:colors_name')
    exec 'silent! colorscheme ' . a:color
  endif
endfun
call VimrcColorFallback('unokai')
call VimrcColorFallback('habamax')
call VimrcColorFallback('desert')

" my statusline
execute 'set statusline=\ %<%f\ %h%m%r%=%y\ [%P]\ [%l,%v]'

augroup vimrc_appearance_and_formatting
  au!

  " more accurate syntax highlighting
  au FileType vim syntax sync fromstart

  if s:is_windows
    " Maximize window
    au GUIEnter * simalt ~x
  endif

  " resize vim-windows when program window is resized
  au VimResized * wincmd =

  " this makes the trailing space indicator invisible
  " while typing, otherwise it can be distracting
  au InsertEnter * set listchars-=trail:■
  au InsertLeave * set listchars+=trail:■

augroup END

" }}}
" KEY MAPPINGS {{{
" plugin related maps can be found in g:myvimdir/plugin_configs

" REMAPS OF DEFAULTS {{{
" it's good to remember these in case I'm stuck with vanilla vi/vim
" (more specifically, remaps of *important* defaults)

" go back to last buffer
nnoremap <BS> <C-^>

" Y yanks until EOL, more like D and C
" yy still yanks the whole line
nnoremap Y y$

" U as a more sensible redo
nnoremap U <C-r>

" Q to replay the q register
" I have never wanted to use Ex mode.
nnoremap Q @q

" Split line (opposite of J) {{{
fun! s:SplitLine()
  exec "normal! i\<CR>\<Esc>^gk"
  silent! substitute/\v +$//
  silent! nohlsearch
  call histdel("search", -1)
  normal! $
endfun
" works with tpope's repeat.vim
nnoremap <silent> <Plug>(MySplitLine) :call <SID>SplitLine()<CR>
      \ :silent! call repeat#set("\<Plug>(MySplitLine)", v:count)<CR>
" }}}
nmap S <Plug>(MySplitLine)

" make a new jump if scrolled far away
fun! s:ScrollMakesJump()
  let distance_til_jump = 150
  if abs(line('.') - line("''")) >= distance_til_jump
    norm m'
  endif
endfun
nnoremap <silent> <C-u> <C-u>:call <SID>ScrollMakesJump()<CR>
nnoremap <silent> <C-d> <C-d>:call <SID>ScrollMakesJump()<CR>

" new jump list mnemonic: previous, next
" (frees up CTRL-i AKA Tab)
nnoremap <silent> <C-p> <C-o>
nnoremap <silent> <C-n> <C-i>

" fast scroll
map <Tab> <C-d>
map <S-Tab> <C-u>

" open current file's directory
nnoremap - :exec 'edit '.expand('%:h')<CR>

" open current working directory
nnoremap + :edit .<CR>

" | and _ for split windows
nnoremap <expr><silent> \| !v:count ? "<C-w>v<C-w><right>" : '\|'
nnoremap <expr><silent> _  !v:count ? "<C-w>s<C-w><down>"  : '_'

" no accidental command window (q:) {{{
" explanation: using 'nnoremap q: <NOP>' gives my
" 'q to quit' map a slight pause, so this is a convoluted
" way of disabling q: without using any map commands.
" also :<C-f> still works
augroup vimrc_cmdwin_map
  au!
  let g:cmdwinmap = 0
  au CmdwinLeave * let g:cmdwinmap = 0
  au CmdwinEnter * exec expand(g:cmdwinmap ? '' : 'quit')
augroup END
fun! s:FixCtrlF_SetAutocmd()
  let g:cmdwinmap = 1
  augroup vimrc_fix_cmd_ctrl_f
    au!
    au CmdlineLeave * call <SID>FixCtrlF_ClearAutocmd()
  augroup END
  " re-enter command-mode
  call feedkeys(':','tn')
endfun
fun! s:FixCtrlF_ClearAutocmd()
  let g:cmdwinmap = 0
  augroup vimrc_fix_cmd_ctrl_f
    au!
  augroup END
endfun
" zee history and zee commands, oui oui }}}
nnoremap z: :let g:cmdwinmap=1<CR>q:
nnoremap z/ :let g:cmdwinmap=1<CR>q/
nnoremap <silent> : :call <SID>FixCtrlF_SetAutocmd()<CR>
xnoremap <silent> : :<C-u>call <SID>FixCtrlF_SetAutocmd()<CR>gv

" move by wrapped lines instead of line numbers, unless the motion is counted
" also set a mark for movements across 5 lines or more
nnoremap <expr> j (v:count >= 5 ? "m'" . v:count : '').(v:count? 'j' : 'gj')
nnoremap <expr> k (v:count >= 5 ? "m'" . v:count : '').(v:count? 'k' : 'gk')
xnoremap <expr> j (v:count >= 5 ? "m'" . v:count : '').(v:count? 'j' : 'gj')
xnoremap <expr> k (v:count >= 5 ? "m'" . v:count : '').(v:count? 'k' : 'gk')

" swap gp and p:
" automatically jump to the end of pasted text
" useful for pasting multiple lines of text
xnoremap p p`]
nnoremap p p`]
nnoremap gp p

" visually select the last change or yank
nnoremap gV `[v`]

" move visual selections around without yank/paste
xnoremap <silent> <Up>   :move-2<CR>gv=gv
xnoremap <silent> <Down> :move'>+<CR>gv=gv

" i_CTRL-[ finger slip
inoremap <C-]> <Esc>

" edit or create plugin config {{{
" press Enter on [Plug 'author/plugin'] to create or open a local config file
fun! s:GotoPluginConfig()
  if getline('.') =~ "Plug '.*'"
    " this pattern matches whatever is after the
    " last slash in single quotes on a Plug line
    let pattern = "Plug.*'[^']*[\\/]\\zs[^']*\\ze'"
    let name = matchstr(getline('.'), pattern)
    let path_to_plugin = resolve(g:myvimdir).'/plugin_configs/'.name
    if filereadable(path_to_plugin.'.vim')
      echo 'Found config for ' . name
      exec 'edit ' . fnameescape(path_to_plugin.'.vim')
    elseif filereadable(path_to_plugin.'.lua')
      echo 'Found config for ' . name
      exec 'edit ' . fnameescape(path_to_plugin.'.lua')
    else
      let msg = 'No plugin config found. Would you like to create one?'
      let choice1 = confirm(msg,"&No\n&yes",1)
      if choice1 == 2
        let choice2 = confirm('',"&Vim\nor &lua",1)
        let ftype = choice2 == 1 ? '.vim' : '.lua'
        redraw
        echo 'Editing local config for ' . name
        exec 'edit ' . fnameescape(path_to_plugin.ftype)
      endif
    endif
  endif
endfun

fun! s:PluginConfigMapper()
  let current_file = expand('%:t')
  if current_file == 'init.vim' || current_file == 'vimrc'
    nnoremap <silent><buffer> <CR> :call <SID>GotoPluginConfig()<CR>
  endif
endfun

" }}}
augroup vimrc_view_plugin_config
  au!
  au FileType vim call <SID>PluginConfigMapper()
augroup END

" }}}
" STANDARD MAPS {{{

" :help works fine, thanks
noremap <F1> <NOP>
inoremap <F1> <NOP>
" Emacs blasphemy
inoremap <C-g> <Esc>
cnoremap <C-g> <C-c>
xnoremap <C-g> <Esc>

" don't run commands without my consent
cnoremap <Esc> <C-c>
cnoremap <Esc> <C-c>

" from tpope's rsi
inoremap <C-a> <C-o>^
inoremap <expr> <C-e> col('.')>strlen(getline('.'))<Bar><Bar>pumvisible()?"\<lt>C-E>":"\<lt>End>"

" expand-o-brackets
inoremap {<Tab> {<CR>}<Esc>O
inoremap {;<Tab> {<CR>};<Esc>O

" change directories (minor time saver)
nnoremap cd :cd<Space>

" alt quit
nnoremap <C-s-Q> :qall<CR>

" quickly manage buffers
fun! s:buflist_proper_esc()
  " otherwise you need to press esc twice
  cnoremap <silent> <buffer> <Esc> <C-u><Esc><Esc>:call <SID>buflist_remove_maps()<CR>
  cnoremap <silent> <buffer> <C-g> <C-u><Esc><Esc>:call <SID>buflist_remove_maps()<CR>
  cnoremap <silent> <buffer> <CR> <CR>:call <SID>buflist_remove_maps()<CR>
endfun
fun! s:buflist_remove_maps()
  silent! cunmap <buffer> <Esc>
  silent! cunmap <buffer> <C-g>
  silent! cunmap <buffer> <CR>
endfun
nnoremap gb :call <SID>buflist_proper_esc()<CR>:ls<CR>:b<Space>
nnoremap gB :call <SID>buflist_proper_esc()<CR>:ls!<CR>:b<Space>

" resizing windows
noremap <C-left>  5<C-w><
noremap <C-up>    5<C-w>+
noremap <C-down>  5<C-w>-
noremap <C-right> 5<C-w>>
noremap <S-left>  <C-w><
noremap <S-up>    <C-w>+
noremap <S-down>  <C-w>-
noremap <S-right> <C-w>>

" change font size for gui
fun! s:ChangeFontSize(type)
  if &guifont == '' | return | endif
  let font = &guifont
  let scale = 0
  if a:type == '0'
    let scale = 10
  else
    let scale = matchstr(font, '\d\+$')
    let scale = scale + (a:type == '+' ? 1 : -1)
    if scale == 0 | return | endif
  endif
  let font = matchstr(font, '.\{-}\ze\d\+$')
  let &guifont = font.scale
endfun
nnoremap <silent> <C-=> :call <SID>ChangeFontSize('+')<CR>
nnoremap <silent> <C--> :call <SID>ChangeFontSize('-')<CR>
nnoremap <silent> <C-0> :call <SID>ChangeFontSize('0')<CR>

" unimpaired.vim inspired
" toggle centering the cursor
nnoremap yoz :let &scrolloff=999-&scrolloff<CR>:set so?<CR>

" toggle syntax highlighting {{{
" useful when Vim is crippled by its inefficient highlighting
fun! s:ToggleSyntaxHighlighting() abort
  let folds = &foldlevel
  execute 'syntax '.(exists("g:syntax_on") ? 'off' : 'enable')
  let &foldlevel=folds
endfun
command! ToggleSyntax call <SID>ToggleSyntaxHighlighting()
" }}}
nnoremap yoS :call <SID>ToggleSyntaxHighlighting()<CR>

" improved help mappings {{{
" (q to quit from Junegunn's vimrc)
fun! s:helpmaps() abort
  if &buftype == 'help'
    nnoremap <buffer> q :bd<CR>
    nnoremap <silent><buffer> <Tab> :call search("\|\\S\\+\|")<CR>
    nnoremap <silent><buffer> <S-Tab> :call search("\|\\S\\+\|",'b')<CR>
    nnoremap <buffer> <CR> <C-]>
  endif
endfun
augroup vimrc_improved_help_maps
  au!
  au BufEnter *.txt call s:helpmaps()
augroup END
" }}}

" Source vimscript operator {{{
" Nice for quick vimscript testing.
fun! s:SourceVimscript(type) abort
  let sel_save = &selection
  let &selection = "inclusive"
  let reg_save = @"
  if a:type == 'line'
    silent execute "normal! '[V']y"
  elseif a:type == 'char'
    silent execute "normal! `[v`]y"
  elseif a:type == "visual"
    silent execute "normal! gvy"
  elseif a:type == "currentline"
    silent execute "normal! yy"
  endif
  let @" = substitute(@", '\n\s*\\', '', 'g')
  " source the content
  @"
  if (g:syntax_on) | syntax on | endif
  let &selection = sel_save
  let @" = reg_save
endfun
" }}}
nnoremap <silent> g: :set opfunc=<SID>SourceVimscript<CR>g@
xnoremap <silent> g: :<C-u>call <SID>SourceVimscript("visual")<CR>
nnoremap <silent> g:: :call <SID>SourceVimscript("currentline")<CR>

" Delete & Replace operator {{{
" (credit to justinmk's init.vim)
" why?
" - repeatable
" - faster/more convenient than visual-replace
" - does not modify ' mark
" - DWIM behavior for linewise => characterwise
func! s:trimws_ml(s) abort "trim whitespace across multiple lines
  return substitute(a:s, '^\_s*\(.\{-}\)\_s*$', '\1', '')
endf
let s:rr_reg = '"'
func! s:set_reg(reg_name) abort
  let s:rr_reg = a:reg_name
endf
func! s:replace_without_yank(type) abort
  let rr_orig = getreg(s:rr_reg, 1) "save registers and types to restore later.
  let rr_type = getregtype(s:rr_reg)
  let ur_orig = getreg('"', 1)
  let ur_type = getregtype('"')
  let sel_save = &selection
  let &selection = "inclusive"
  let replace_curlin = (1==col("'[") && (col('$')==1 || col('$')==(col("']")+1)) && line("'[")==line("']"))

  if a:type ==? 'line' || replace_curlin
    exec "keepjumps normal! '[V']\"".s:rr_reg."p"
  elseif a:type ==? 'block'
    exec "keepjumps normal! `[\<C-v>`]\"".s:rr_reg."p"
  elseif a:type == 'visual'
    exec "keepjumps normal! gv\"".s:rr_reg."p"
  else
    "DWIM: if pasting linewise contents in a _characterwise_ motion, trim
    "      surrounding whitespace from the content to be pasted.
    if rr_type ==# "V"
      call setreg(s:rr_reg, s:trimws_ml(rr_orig), "v")
    endif
    exec "keepjumps normal! `[v`]\"".s:rr_reg."p"
  endif

  let &selection = sel_save
  call setreg('"',      ur_orig, ur_type)
  call setreg(s:rr_reg, rr_orig, rr_type)
endf

" }}}
nnoremap <silent> dr  :<C-u>call <SID>set_reg(v:register)<Bar>set opfunc=<SID>replace_without_yank<CR>g@
nnoremap <silent> drr :<C-u>call <SID>set_reg(v:register)<CR>0:<C-u>set opfunc=<SID>replace_without_yank<CR>g@$
xnoremap <silent> R :<C-u>call <SID>set_reg(v:register)<Bar>call <SID>replace_without_yank('visual')<CR>

" %% expands to current buffer file name
" :: expands to current buffer file path
cnoremap %% <C-r>=fnameescape(expand('%'))<CR>
cnoremap :: <C-r>=fnameescape(expand('%:p:h'))<CR>/

" browse search results while searching with tab/s-tab
cnoremap <expr>  <Tab>    getcmdtype() =~ '[?/]' ? '<C-g>' : feedkeys('<Tab>', 'int')[1]
cnoremap <expr>  <S-Tab>  getcmdtype() =~ '[?/]' ? '<C-t>' : feedkeys('<S-Tab>', 'int')[1]

" automatically create undo breaks in insert mode {{{
" it's better to just build the habit of exiting and entering
" insert mode in small chunks, but still gonna try this out.
fun! s:SetupInsertUndoBreaks()
  inoremap <buffer> . .<C-g>u
  inoremap <buffer> , ,<C-g>u
  inoremap <buffer> ! !<C-g>u
  inoremap <buffer> ? ?<C-g>u
endfun
augroup vimrc_auto_insert_undo_breaks
  au!
  au FileType txt,markdown call <SID>SetupInsertUndoBreaks()
augroup END
"}}}

" consistent and sane terminal escape
if has('nvim')
  " set change marks for command output
  " allows for gp (custom mapping to select last change)
  " to select the last command's output
  let s:t_esc = '<C-\><C-n>k$m]j$'
  exec "tnoremap <CR> ".
        \ s:t_esc .":call setpos(\"'[\",[0,line('.')+1,0,0])<CR>a<CR>"
elseif has('terminal')
  let s:t_esc = '<C-w>N'
endif
exec 'tnoremap <Esc> '. s:t_esc
exec 'tnoremap <C-[> '. s:t_esc
exec 'tnoremap <C-]> '. s:t_esc
exec 'tnoremap <C-g> '. s:t_esc

" }}}
" LEADER MAPS {{{
" space is my leader

" lemme hold shift for capital leader maps
map <S-Space> <Space>
map <S-Space><S-Space> <Space><Space>

" don't move my cursor plz
nnoremap <Space> <NOP>
xnoremap <Space> <NOP>

" shortcuts
nnoremap <silent><Space>v :exec 'edit '.resolve($MYVIMRC)<CR>
"              🐄     🐄
nnoremap <Space>c <C-w>c
nnoremap <Space>o <C-w>o
nnoremap <Space>w <C-w>w
nnoremap <Space>; :
if maparg('<Space><Space>','n') == ''
  nnoremap <Space><Space> :
endif

" open :terminal consistently
if has('nvim')
  nnoremap <Space>t :split +term<CR>a
else
  nnoremap <Space>t :term<CR>
endif


" :help under the cursor, also adds to command history
function! s:HelpWithHistory(type)
  let text = ''
  if a:type == 'visual'
    let text = getline('.')[col("'<")-1:col("'>")-1]
  elseif a:type == 'word'
    let text = expand('<cword>')
  endif
  let cmd = 'help ' . text
  call histadd(':', cmd)
  execute cmd
endfunction
nnoremap <Space>H :call <SID>HelpWithHistory('word')<CR>
xnoremap <Space>H :call <SID>HelpWithHistory('visual')<CR>

fun! s:GotoPreviousWindow()
  let cur_win = winnr()
  wincmd p
  if winnr() == cur_win
    wincmd w
  endif
endfun
" reliable CTRL-W_p (if previous window is gone, move to next window)
nnoremap <silent> <Space><Tab> :call <SID>GotoPreviousWindow()<CR>

" populate the location list with last search results
" useful for seeing the exact number of matches
nnoremap <Space>? :lvim //g %<CR>

" search for all numbers
nnoremap <Space>/# /\v\d+<CR>

" search for brackets
nnoremap <Space>/[ ?[{}]<CR>
nnoremap <Space>/] /[{}]<CR>

" toggle location & quickfix lists {{{
" (from vimwiki)
fun! GetBufferList() abort
  redir =>buflist
  silent! ls!
  redir END
  return buflist
endfun

fun! ToggleList(bufname, pfx) abort
  let buflist = GetBufferList()
  for bufnum in map(filter(split(buflist, '\n'),
        \ 'v:val =~ "'.a:bufname.'"'),
        \ 'str2nr(matchstr(v:val, "\\d\\+"))')
    if bufwinnr(bufnum) != -1
      execute(a:pfx.'close')
      return
    endif
  endfor
  if a:pfx == 'l' && len(getloclist(0)) == 0
    echohl ErrorMsg
    echo "Location List is Empty."
    return
  endif
  let winnr = winnr()
  execute(a:pfx.'open')
  if winnr() != winnr
    wincmd p
  endif
endfun
" }}}
nnoremap <silent> <Space>l :call ToggleList("Location List", 'l')<CR>
nnoremap <silent> <Space>q :call ToggleList("Quickfix List", 'c')<CR>

" quick scratch buffer
nnoremap <Space>S :enew<CR>:setl bt=nofile bh=hide noswf<CR>:set ft=

" }}}

" }}}
" MISCELLANEOUS {{{
" Other functions, commands, settings,
" etc.  that don't fit elsewhere go here

" DoubleView {{{
" Vertically split the current buffer into two windows which will stay
" scroll-bound together.  Allows you to see twice as much as before!
" (disables the wrap setting and expands folds to work better)
" (PS: this is kind of janky, but I like it anyway)
fun! s:DoubleView() abort
  let DV_so=&scrolloff
  set scrolloff=0 noscrollbind nowrap nofoldenable
  exec "normal! m`\<C-b>"
  botright vsplit
  normal! Ljzt
  windo setl scrollbind
  let &scrolloff=DV_so
  exec "normal! \<C-w>p``"
endfun " }}}
command! DoubleView call <SID>DoubleView()

" basic custom text objects
" "inside symbol" and "a symbol"
let s:separators = exists('g:loaded_targets') ? [ '`', '%']
      \ : [ '_', '.', ':', ',', ';', '<Bar>', '/', '<Bslash>', '*', '+', '%', '`' ]
for char in s:separators
  exec 'xnoremap i' . char . ' :<C-u>normal! T' . char . 'vt' . char . '<CR>'
  exec 'onoremap i' . char . ' :normal vi' . char . '<CR>'
  exec 'xnoremap a' . char . ' :<C-u>normal! F' . char . 'vf' . char . '<CR>'
  exec 'onoremap a' . char . ' :normal va' . char . '<CR>'
endfor

" Clear Trailing White spaces
cabbrev ctw s/\s\+$//e

" }}}


