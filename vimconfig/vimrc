" vim: set foldmethod=marker foldlevel=0:
" Author: Austin Smith <AssailantLF@gmail.com>
" Source: https://gitlab.com/AssailantLF/vimrc

" ===========================================================================
" STARTUP {{{
" ===========================================================================

" let s:is_cygwin = has('win32unix') || has('win64unix')
" let s:is_mac = has('gui_macvim') || has('mac')
let s:is_windows = has('win32') || has('win64')
let s:is_nvim = has('nvim')
let s:myvimdir ="~/.vim"
if s:is_windows
  let s:myvimdir ="~/vimfiles"
elseif s:is_nvim
  let s:myvimdir ="~/.config"
endif

" use Vim settings over obsolescent Vi settings
set nocompatible

" enables filetype detection, ftplugins, and indent files
filetype plugin indent on

" }}}
" ===========================================================================
" VIM-PLUG {{{
" ===========================================================================
" (minimalist plugin manager)

" Install plugins at startup if they aren't installed {{{

if !isdirectory(expand(s:myvimdir . "/plugged"))
  echo "Installing plugins via vim-plug,"
  echo "restart Vim to finish installation."
  au VimEnter * PlugInstall
endif

" }}}

call plug#begin()

" PLUGINS

" Tim Pope
Plug 'tpope/vim-surround'           " surroundings manipulation
Plug 'tpope/vim-fugitive'           " Git integration
Plug 'tpope/vim-unimpaired'         " many helpful mappings
Plug 'tpope/vim-commentary'         " easier commenting
Plug 'tpope/vim-speeddating'        " increment dates, times, and more
Plug 'tpope/vim-repeat'             " . repeat for plugins
Plug 'tpope/vim-eunuch'             " UNIX helper commands
Plug 'tpope/vim-rsi'                " readline style insertion
Plug 'tpope/vim-dispatch'           " asynchronous make

" Text Objects
Plug 'kana/vim-textobj-user'        " custom text object plugin
Plug 'kana/vim-textobj-entire'      " entire document (ae)
Plug 'kana/vim-textobj-indent'      " indent (ai)
Plug 'kana/vim-textobj-function'    " function (af)
Plug 'wellle/targets.vim'           " extended, extra text objects

" Appearance/UI
Plug 'justinmk/vim-syntax-extra'    " improved C syntax highlighting
Plug 'flazz/vim-colorschemes'       " all the colorschemes
Plug 'itchyny/lightline.vim'        " better looking UI
Plug 'mhinz/vim-Startify'           " nice startup screen
Plug 'Yggdroot/indentLine'          " shows indents made of spaces
Plug 'junegunn/vim-easy-align'      " text alignment plugin
Plug 'junegunn/goyo.vim'            " distraction free text editing
Plug 'kkoenig/wimproved.vim'        " improvements for Windows UI

" The Rest
Plug 'justinmk/vim-dirvish'         " vinegar inspired file manager
Plug 'justinmk/vim-gtfo'            " go to file manager or terminal
Plug 'junegunn/gv.vim'              " view git commits (needs fugitive)
Plug 'tommcdo/vim-exchange'         " easy text exchange for vim
Plug 'mhinz/vim-sayonara'           " sane buffer/window closing
Plug 'ctrlpvim/ctrlp.vim'           " fuzzy file/buffer search
Plug 'ervandew/supertab'            " tab for auto completion
Plug 'Konfekt/FastFold'             " more efficient automatic folding
Plug 'AndrewRadev/switch.vim'       " toggle/switch various objects
Plug 'szw/vim-g'                    " google search from Vim
Plug 'ludovicchabant/vim-gutentags' " automatic tag manager
Plug 'majutsushi/Tagbar'            " view ctags easily
if has('python') || has('python3')
  Plug 'sjl/Gundo.vim'              " visual undo tree
  Plug 'SirVer/UltiSnips'           " snippet plugin
  Plug 'honza/vim-snippets'         " preconfigured snippet package
endif

call plug#end()

" }}}
" ===========================================================================
"  GENERAL SETTINGS {{{
" ===========================================================================

set hidden
set incsearch
set ignorecase
set smartcase
set autoread
set lazyredraw
set gdefault
set showcmd
set vb t_vb=
set sidescroll=8
set backspace=indent,eol,start
set history=10000
set undolevels=100000
set complete=.,w,b,t
set synmaxcol=1024
set nrformats-=octal
set fileformat=unix
set virtualedit=all
set sessionoptions-=options
set sessionoptions-=folds
set path=.,**
if s:is_windows
  set makeprg=build.bat
endif
silent! set mouse=a

" command-line completion settings
set wildmenu
set wildmode=full
set wildignore+=.hg,.git,.svn                    " Version control
set wildignore+=*.aux,*.out,*.toc                " LaTeX intermediate files
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg   " binary images
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
set wildignore+=*.spl                            " compiled spelling word lists
set wildignore+=*.sw?                            " Vim swap files
set wildignore+=*.DS_Store                       " OSX garbage

" put this useful, ugly junk in a folder
let s:tempdir=expand(s:myvimdir."/stuff")
if !isdirectory(expand(s:tempdir))
  call mkdir(expand(s:tempdir), "p")
endif
set backup
let &backupdir=s:tempdir
set swapfile
let &directory=s:tempdir
if has('persistent_undo')
  set undofile
  let &undodir=s:tempdir
endif

" return to the same line when a file is reopened
augroup line_return
  au!
  au BufReadPost *
        \ if line("'\"") > 0 && line("'\"") <= line("$") |
        \     execute 'normal! g`"zvzz' |
        \ endif
augroup END

" }}}
" ===========================================================================
"  APPEARANCE/AESTHETIC {{{
" ===========================================================================
" if you can't find something, it's probably under TEXT AND FORMATTING

syntax on
set laststatus=2
set ruler
set cursorline
set guioptions=
set t_Co=256
set cpoptions+=$
set splitright
set numberwidth=1

" fallback default colorscheme
colorscheme desert
silent! colorscheme badwolf

" set the status line the way Derek Wyatt likes it
" (fallback status line if Lightline isn't enabled)
set stl=%m\ %f\ %r\ Line:%l/%L[%p%%]\ Col:%v\ Buf:#%n\ [%b][0x%B]

augroup appearance
  au!
  if s:is_windows
    " maximize window in windows
    au GUIEnter * simalt ~x
    set guifont=DejaVu_Sans_Mono:h9
  else
    set guifont=DejaVu\ Sans\ Mono\ 9
  endif
  " resize windows/splits when the window is resized
  au VimResized * :wincmd =
augroup END

" }}}
" ===========================================================================
" TEXT AND FORMATTING {{{
" ===========================================================================
" if you can't find something, it's probably under APPEARANCE/AESTHETIC
"
" OR...
"
" for filetype specific settings, check ~/.vim/after/ftplugin/
" (.vim on Unix, vimfiles on Windows)

" see: fo-table for info on flags
set formatoptions=rq1j

set tabstop=4 softtabstop=0 shiftwidth=4 expandtab

set encoding=utf-8
set autoindent
set smartindent
set foldmethod=syntax
set foldlevel=999
set textwidth=80
set nosmarttab
set linebreak
set listchars=tab:▸\ ,trail:■,extends:»,precedes:«
set list
if has('linebreak')
  set showbreak=+↪
  silent! set breakindent
else
  set listchars+=eol:¬
endif

augroup no_trail_in_insert
  au!
  au InsertEnter * :set listchars-=trail:■
  au InsertLeave * :set listchars+=trail:■
augroup END

" }}}
" ===========================================================================
" KEY MAPPINGS {{{
" ===========================================================================
" anything related to plugins is located
" under its respective PLUGIN SETTINGS section

" ---------------------------------------------------------------------------
" REMAPS OF DEFAULTS {{{
" ---------------------------------------------------------------------------
" it's good to remember these in case you're stuck with vanilla vi/vim

" disabled
noremap  <F1> <NOP>
inoremap <F1> <NOP>
noremap <space> <NOP>
noremap <s-cr> <NOP>

" Enter command line mode
noremap <cr> :
" make Enter/CR work normally in quickfix and command-window
augroup enter_correctly
  au!
  au BufReadPost quickfix nnoremap <buffer> <cr> <cr>
  au CmdWinEnter * nnoremap <buffer> <cr> <cr>
augroup END

" go back to last buffer
noremap <backspace> <c-^>

" Y yanks until EOL, more like D and C
" yy still yanks the whole line
nnoremap Y y$

" U as a more sensible redo
nnoremap U <c-r>

" [S]plit line (sister to [J]oin lines)
" cc still changes the whole line
nnoremap S i<cr><esc>^mwgk:silent! s/\v +$//<cr>:noh<cr>$

" format the last paste or change
nnoremap g= `[v`]=

" window management
nnoremap <tab>      <c-w>
nnoremap <tab><tab> <c-w><c-w>
nnoremap <s-tab>    <c-w>c

" going to the exact column is more useful most of the time
nnoremap ` '
nnoremap ' `

" keep a selection highlighted while indenting
xnoremap < <gv
xnoremap > >gv

" move by wrapped lines instead of line numbers, unless the motion is counted
noremap <expr> j (v:count? 'j' : 'gj')
noremap <expr> k (v:count? 'k' : 'gk')

" { and } skip over closed folds
nnoremap <expr> } foldclosed(search('^$', 'Wn')) == -1 ? "}" : "}j}"
nnoremap <expr> { foldclosed(search('^$', 'Wnb')) == -1 ? "{" : "{k{"

" automatically jump to the end of pasted text
" useful for pasting multi-lines of text
xnoremap p p`]
nnoremap p p`]

" esc to stop inserting in Neovim terminal mode
if s:is_nvim
  tnoremap <Esc><Esc> <c-\><c-n>
endif

" }}}
" ---------------------------------------------------------------------------
" NORMAL MAPS {{{
" ---------------------------------------------------------------------------

" expand-o-brackets
inoremap {<tab> {<cr>}<esc>O

" change directories (minor time saver)
nnoremap cd :cd<space>

" quickly manage buffers
nnoremap gb :ls<cr>:b<space>
nnoremap gB :ls!<cr>:b<space>

" jump list (previous, next)
nnoremap <c-p> <c-o>
nnoremap <c-n> <c-i>

" easier scrolling (I just prefer not reaching for e and y)
nnoremap <c-j> <c-e>
nnoremap <c-k> <c-y>

" resizing windows
noremap <c-left>  <c-w><
noremap <c-up>    <c-w>+
noremap <c-down>  <c-w>-
noremap <c-right> <c-w>>

" (go search numbers) search for all numbers
nnoremap <silent> g/# /\v\d+<cr>

" q to quit help files and the quickfix menu {{{
" (mostly from Junegunn's vimrc)
function! s:helpquit()
  if &buftype == 'help'
    nnoremap <buffer> q :bd<cr>
  endif
endfunction
augroup q_for_quit
  au!
  au BufEnter *.txt call s:helpquit()
  au BufReadPost quickfix nnoremap <buffer> q :bd<cr>
augroup END
" }}}

" Source vimscript operator {{{
" Nice for quick vimscript testing.
function! SourceVimscript(type)
  let sel_save = &selection
  let &selection = "inclusive"
  let reg_save = @"
  if a:type == 'line'
    silent execute "normal! '[V']y"
  elseif a:type == 'char'
    silent execute "normal! `[v`]y"
  elseif a:type == "visual"
    silent execute "normal! gvy"
  elseif a:type == "currentline"
    silent execute "normal! yy"
  endif
  let @" = substitute(@", '\n\s*\\', '', 'g')
  " source the content
  @"
  let &selection = sel_save
  let @" = reg_save
endfunction
" }}}
nnoremap <silent> g: :set opfunc=SourceVimscript<cr>g@
vnoremap <silent> g: :<c-U>call SourceVimscript("visual")<cr>
nnoremap <silent> g:: :call SourceVimscript("currentline")<cr>

" toggle pastemode (fits well with unimpaired.vim)
set pastetoggle=cop

" Go Continuous Scroll-Binding
" Vertically split the current buffer into two windows which will stay
" scroll-bound together.  Allows you to see twice as much as before!
" (disables the wrap setting and expands folds to work better)
" (PS: this is kind of janky, but I like it anyway)
nnoremap <silent> gcsb :<c-u>let @z=&so<cr>:set so=0 noscb nowrap nofen<cr>:bo vs<cr>Ljzt:setl scb<cr><c-w>p:setl scb<cr>:let &so=@z<cr>

" %% for current buffer file name
" :: for current buffer file path
" (credit to romainl's vimrc)
cnoremap %% <c-r>=expand('%')<cr>
cnoremap :: <c-r>=expand('%:p:h')<cr>/

" }}}
" ---------------------------------------------------------------------------
" LEADER MAPS {{{
" ---------------------------------------------------------------------------

" leader the easiest key to reach
let mapleader = "\<space>"

" find a file
nnoremap <leader>f :find<space>

" write file
nnoremap <leader>w :w<cr>

" open vimrc
nnoremap <leader>v :e $MYVIMRC<cr>
nnoremap <leader>V :tabnew $MYVIMRC<cr>

" toggle centering the cursor
nnoremap <leader>zz :let &scrolloff=999-&scrolloff<cr>

" toggle syntax highlighting {{{
function! ToggleSyntaxHightlighting()
  if exists("g:syntax_on")
    syntax off
  else
    syntax on
  endif
endfunction
" }}}
nnoremap <silent> <leader>S :call ToggleSyntaxHightlighting()<cr>

" toggle location & quickfix lists {{{
" (from vimwiki)
function! GetBufferList()
  redir =>buflist
  silent! ls!
  redir END
  return buflist
endfunction

function! ToggleList(bufname, pfx)
  let buflist = GetBufferList()
  for bufnum in map(filter(split(buflist, '\n'), 'v:val =~ "'.a:bufname.'"'), 'str2nr(matchstr(v:val, "\\d\\+"))')
    if bufwinnr(bufnum) != -1
      exec(a:pfx.'close')
      return
    endif
  endfor
  if a:pfx == 'l' && len(getloclist(0)) == 0
    echohl ErrorMsg
    echo "Location List is Empty."
    return
  endif
  let winnr = winnr()
  exec(a:pfx.'open')
  if winnr() != winnr
    wincmd p
  endif
endfunction
" }}}
nnoremap <silent> <leader>l :call ToggleList("Location List", 'l')<cr>
nnoremap <silent> <leader>q :call ToggleList("Quickfix List", 'c')<cr>

" Alternate between header and source files {{{
" (credit to junegunn's vimrc)
function! Alternate_C_Header()
  let name = expand('%:r')
  let ext = tolower(expand('%:e'))
  let sources = ['c', 'cc', 'cpp', 'cxx']
  let headers = ['h', 'hh', 'hpp', 'hxx']
  for pair in [[sources, headers], [headers, sources]]
    let [set1, set2] = pair
    if index(set1, ext) >= 0
      for h in set2
        let aname = name.'.'.h
        for a in [aname, toupper(aname)]
          if filereadable(a)
            execute 'e' a
            return
          end
        endfor
      endfor
    endif
  endfor
endfunction
" }}}
nnoremap <leader>A :call Alternate_C_Header()<cr>

" }}}
" ---------------------------------------------------------------------------

" }}}
" ===========================================================================
" ABBREVIATIONS / ALIASES {{{
" ===========================================================================

" delete all buffers and open Startify {{{
function! ResetVim()
  exec "0,999bd"
  if exists('g:autoloaded_startify')
    exec "Startify"
  endif
endfunction
" }}}
cabbrev ResetVim call ResetVim()

" Clear Trailing White spaces
cabbrev ctw s/\s\+$//e

" Press \r to start rotating lines and <C-c> (Control+c) to stop. {{{
function! s:RotateString(string)
  let split_string = split(a:string, '\zs')
  return join(split_string[-1:] + split_string[:-2], '')
endfunction

function! s:RotateLine(line, leading_whitespace, trailing_whitespace)
  return substitute(
        \ a:line,
        \ '^\(' . a:leading_whitespace . '\)\(.\{-}\)\(' . a:trailing_whitespace . '\)$',
        \ '\=submatch(1) . <SID>RotateString(submatch(2)) . submatch(3)',
        \ ''
        \ )
endfunction

function! s:RotateLines()
  let saved_view = winsaveview()
  let first_visible_line = line('w0')
  let last_visible_line = line('w$')
  let lines = getline(first_visible_line, last_visible_line)
  let leading_whitespace = map(
        \ range(len(lines)),
        \ 'matchstr(lines[v:val], ''^\s*'')'
        \ )
  let trailing_whitespace = map(
        \ range(len(lines)),
        \ 'matchstr(lines[v:val], ''\s*$'')'
        \ )
  try
    while 1 " <C-c> to exit
      let lines = map(
            \ range(len(lines)),
            \ '<SID>RotateLine(lines[v:val], leading_whitespace[v:val], trailing_whitespace[v:val])'
            \ )
      call setline(first_visible_line, lines)
      redraw
      sleep 50m
    endwhile
  finally
    if &modified
      silent undo
    endif
    call winrestview(saved_view)
  endtry
endfunction
" }}}
cabbrev THEBESTTHINGEVER call <SID>RotateLines()<CR>

" }}}
" ===========================================================================
" PLUGIN SETTINGS {{{
" ===========================================================================
" OCD's beware: arbitrarily sorted list ahead!

" Fugitive {{{
nnoremap <leader>gs :Gstatus<cr>
nnoremap <leader>gd :Gdiff<cr>
nnoremap <leader>gD :Gdiff HEAD<cr>
nnoremap <leader>gc :Gcommit<cr>
nnoremap <leader>gl :Git log<cr>
nnoremap <leader>gp :Git push<cr>
nnoremap <leader>gw :Gwrite<cr>
nnoremap <leader>gr :Gremove<cr>
" }}}

" Dispatch {{{
nnoremap <leader>m :Make<cr>
" }}}

" Sayonara {{{
" close buffer
nnoremap gs :Sayonara<cr>
" close buffer, but not window
nnoremap gS :Sayonara!<cr>
" prompt to close vim when closing the last file
let g:sayonara_confirm_quit = 1
" }}}

" CtrlP {{{
" ignore .git folders to speed up searches
let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']
let g:ctrlp_max_depth = 15
" include hidden files
let g:ctrlp_show_hidden = 1
" open multiple files in ONE window
let g:ctrlp_open_multiple_files = '1vr'
" ctrl-o to open specifically
let g:ctrlp_arg_map = 1
" change default CtrlP mapping
" more like LeaderP amirite hahahahahaHAHWDAQKAJDHKAHKDJwda.
let g:ctrlp_map = '<leader>p'
" specific directory search
nnoremap <leader><c-p> :CtrlP<space>
" access recent files and buffers
nnoremap <leader><c-e> :CtrlPMRUFiles<cr>
nnoremap <leader>b :CtrlPBuffer<cr>
" }}}

" gtfo.vim {{{
let g:gtfo#terminals = { 'win' : 'C:\WINDOWS\system32\cmd.exe /k' }
" }}}

" wimproved.vim {{{
" toggle fullscreen
nnoremap <F11> :WToggleFullscreen<cr>
augroup wimproved
  autocmd GUIEnter * silent! WToggleClean
augroup END
" }}}

" Goyo {{{
" toggle Goyo (distraction free editing)
nnoremap <leader>G :Goyo<cr>
" }}}

" vim-easy-align {{{
" Start interactive EasyAlign in visual mode (e.g. vipga)
vmap ga <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)
" }}}

" indentLine {{{
nnoremap <leader>i :IndentLinesToggle<cr>
" disable by default
let g:indentLine_enabled = 1
" enable for certain filetypes
let g:indentLine_fileType = ['c', 'cpp']
" }}}

" switch.vim {{{
let g:switch_mapping = "<leader>s"
"}}}

" Gundo {{{
nnoremap <leader>u :GundoToggle<cr>
" }}}

" Tagbar {{{
nnoremap <leader>t :TagbarToggle<cr>
" }}}

" lightline {{{
nnoremap <silent> <leader>L :exec lightline#toggle()<cr>
" }}}

" Dirvish {{{
" open current file's directory
nnoremap <silent> - :Dirvish %<cr>
" direct shortcut
nnoremap <leader>d :Dirvish<space>
augroup my_dirvish_events
  autocmd!
  " I use <cr> to enter cmdline mode,
  " so use o to open
  autocmd FileType dirvish
        \ nnoremap <buffer> <cr> :
        \|xnoremap <buffer> <cr> :
        \|nnoremap <buffer> o :call dirvish#open("edit", 0)<CR>
        \|xnoremap <buffer> o :call dirvish#open("edit", 0)<CR>
        \|nnoremap <buffer> h :call dirvish#open("split", 0)<CR>
        \|xnoremap <buffer> h :call dirvish#open("split", 0)<CR>
        \|nnoremap <buffer> l :call dirvish#open("vsplit", 0)<CR>
        \|xnoremap <buffer> l :call dirvish#open("vsplit", 0)<CR>
  " map gh to hide "hidden" files.
  autocmd FileType dirvish nnoremap <buffer> gh
        \ :g@\v/\.[^\/]+/?$@d<cr>
augroup END
" }}}

" Startify {{{
augroup startify_maps
  au!
  " I use <cr> to enter command line mode,
  " so use o to open files instead.
  au User Startified unmap <buffer> <cr>
  au User Startified nmap <buffer> o <Plug>(startify-open-buffers)
augroup END
let g:ctrlp_reuse_window = 'startify'
let g:startify_files_number = 5
let g:startify_session_delete_buffers = 1
let g:startify_session_persistence = 1
let g:startify_custom_header = [
      \ '                                                                            ',
      \ '       ___________________________                                          ',
      \ '      /                           \                                         ',
      \ '      |     VIM - Vi IMproved     |                                         ',
      \ '      |    -------------------    |                                         ',
      \ '      |  by Bram Moolenaar et al. |                                         ',
      \ '      \__________________   ______/            __----~~~~~~~~~~~------___   ',
      \ '                         \ /        .  .   ~~//====......          __--~ ~~ ',
      \ '                    -.    \\      \_|//     |||\\  ~~~~~~::::... /~         ',
      \ '                 ___-==_   \   _-~o~  \/    |||  \\            _/~~-        ',
      \ '         __---~~~.==~||\=_    -_--~/_-~|-   |\\   \\        _/~             ',
      \ '     _-~~     .=~    |  \\-_    ''-~7  /-   /  ||    \      /               ',
      \ '   .~       .~       |   \\ -_    /  /-   /   ||      \   /                 ',
      \ '  /  ____  /         |     \\ ~-_/  /|- _/   .||       \ /                  ',
      \ '  |~~    ~~|--~~~~--_ \     ~==-/   | \~--===~~        .\                   ',
      \ '           ''         ~-|      /|    |-~\~~       __--~~                    ',
      \ ]
" }}}

" }}}
" ===========================================================================
