" vim: set foldmethod=marker:
" Author: Austin Smith <AssailantLF@gmail.com>
" Source: https://gitlab.com/AssailantLF/dotfiles

" ===========================================================================
" STARTUP {{{
" ===========================================================================

" let s:is_cygwin = has('win32unix') || has('win64unix')
" let s:is_mac = has('gui_macvim') || has('mac')
let s:is_windows = has('win32') || has('win64')
let s:is_nvim = has('nvim')
let s:myvimdir ="~/.vim"
if s:is_windows
  let s:myvimdir ="~/vimfiles"
elseif s:is_nvim
  let s:myvimdir ="~/.config/nvim"
endif

" use Vim settings over obsolescent Vi settings
" probably not necessary, but w/e
set nocompatible

" enables filetype detection, ftplugins, and indent files
filetype plugin indent on

" }}}
" ===========================================================================
" VIM-PLUG {{{
" ===========================================================================
" (minimalist plugin manager)

" First time startup prompt {{{

if !isdirectory(expand(s:myvimdir . "/plugged"))
  if !isdirectory(expand(s:myvimdir . "/autoload/vimrc_booted/"))
    if s:is_windows
      silent exec expand("!mkdir \\%userprofile\\%/vimfiles/autoload/vimrc_booted/")
    else
      exec expand("!mkdir " . s:myvimdir . "/autoload/vimrc_booted")
    endif
    echo "To install plugins (via vim-plug),"
    echo "run :PlugInstall | qa"
  endif
endif

" }}}

call plug#begin()

" PLUGINS

" Tim Pope
Plug 'tpope/vim-surround'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-rsi'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-sleuth'
Plug 'tpope/vim-speeddating'
Plug 'tpope/vim-commentary'

" Text Objects
Plug 'kana/vim-textobj-user'
Plug 'kana/vim-textobj-entire'
Plug 'kana/vim-textobj-indent'
Plug 'kana/vim-textobj-function'
Plug 'wellle/targets.vim'

" Appearance/UI
Plug 'mhinz/vim-Startify'
Plug 'itchyny/lightline.vim'
Plug 'kkoenig/wimproved.vim'
Plug 'junegunn/rainbow_parentheses.vim', { 'on': 'RainbowParentheses' }
Plug 'junegunn/vim-easy-align',   { 'on': ['<Plug>(EasyAlign)', 'EasyAlign'] }
Plug 'junegunn/goyo.vim',         { 'on': 'Goyo' }
Plug 'justinmk/vim-syntax-extra', { 'for': ['c', 'cpp'] }
Plug 'Yggdroot/indentLine',       { 'on': 'IndentLinesEnable' }
autocmd! User indentLine doautocmd indentLine Syntax | autocmd BufRead * IndentLinesReset
" ^ this is a fix for lazy loading + indentLine ^

" The Rest
Plug 'justinmk/vim-dirvish'
Plug 'justinmk/vim-gtfo'
Plug 'tommcdo/vim-exchange'
Plug 'AndrewRadev/switch.vim'
Plug 'Konfekt/FastFold'
Plug 'ludovicchabant/vim-gutentags'
Plug 'majutsushi/Tagbar',  { 'on': 'TagbarToggle' }
Plug 'mbbill/undotree',    { 'on': 'UndotreeToggle' }
Plug 'mhinz/vim-sayonara', { 'on': 'Sayonara' }
Plug 'ctrlpvim/ctrlp.vim', { 'on': ['CtrlP', 'CtrlPMRU', 'CtrlPBuffer', 'CtrlPLine'] }
Plug 'junegunn/gv.vim',    { 'on': 'GV' }
Plug 'szw/vim-g',          { 'on': 'Google' }
Plug 'ervandew/supertab',  "{ 'on': [] }
Plug 'SirVer/UltiSnips',   "{ 'on': [] }

" TODO: Report issue on cursor position moving
" augroup plug_lazy_load
"   autocmd!
"   autocmd InsertEnter * call plug#load('supertab', 'UltiSnips')
"         \| exec 'norm! zz' | au! plug_lazy_load
" augroup END

call plug#end()

" }}}
" ===========================================================================
"  GENERAL SETTINGS {{{
" ===========================================================================

set hidden
set incsearch
set ignorecase
set smartcase
set autoread
set lazyredraw
set gdefault
set showcmd
set vb t_vb=
set sidescroll=8
set backspace=indent,eol,start
set history=10000
set undolevels=100000
set complete=.,w,b,t
set synmaxcol=1024
set nrformats-=octal
set fileformat=unix
set virtualedit=all
set nostartofline
set sessionoptions-=options
set sessionoptions-=folds
set path=.,**
if s:is_windows
  set makeprg=build.bat
endif
silent! set mouse=a

" command-line completion settings
set wildmenu
set wildmode=full
set wildignore+=.hg,.git,.svn                    " Version control
set wildignore+=*.aux,*.out,*.toc                " LaTeX intermediate files
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg   " binary images
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
set wildignore+=*.spl                            " compiled spelling word lists
set wildignore+=*.sw?                            " Vim swap files
set wildignore+=*.DS_Store                       " OSX garbage

" backups, swapfiles, & undofiles in one place
let s:tempdir=expand(s:myvimdir."/temp")
if !isdirectory(expand(s:tempdir))
  call mkdir(expand(s:tempdir), "p")
endif
set backup
let &backupdir=s:tempdir
set swapfile
let &directory=s:tempdir
if has('persistent_undo')
  set undofile
  let &undodir=s:tempdir
endif

" return to the same line when a file is reopened
augroup line_return
  autocmd!
  autocmd BufReadPost *
        \ if line("'\"") > 0 && line("'\"") <= line("$") |
        \     execute 'normal! g`"zvzz' |
        \ endif
augroup END

" make 'nobuflisted' persist when editing a file
function! s:PersistNobl()
  if exists('b:persist_nobl')
    setl nobuflisted
  elseif !&buflisted
    let b:persist_nobl = 1
  endif
endfunction
augroup persist_nobuflisted
  autocmd!
  autocmd OptionSet buflisted call <SID>PersistNobl()
  autocmd BufEnter * call <SID>PersistNobl()
augroup END

" }}}
" ===========================================================================
"  APPEARANCE AND FORMATTING {{{
" ===========================================================================
" some settings will be overwritten when certain filetypes are detected
" see: filetype-indent-on & ftplugins

" default tab settings
set smarttab
set shiftwidth=4 softtabstop=-1 expandtab

" indenting/formatting
set autoindent
set smartindent
set textwidth=80
set encoding=utf-8

" default format options
" see: fo-table for info on flags
set formatoptions=rq1j

" mostly aesthetic options
set laststatus=2
set ruler
set guioptions=
set t_Co=256
set cpoptions+=$
set splitright
set numberwidth=1
set foldmethod=indent
set foldlevel=999
set linebreak
set listchars=tab:â–¸\ ,trail:â– ,extends:Â»,precedes:Â«
set list
if has('linebreak')
  set showbreak=â†ª
  silent! set breakindent
else
  set listchars+=eol:Â¬
endif

" my 'modifed' version of Bad Wolf
silent! colorscheme badwolf_flattened

" fallback default colorscheme
if !exists('g:colors_name')
  colorscheme desert
endif


" standard status line if lightline isn't enabled
" (pretty much the same layout as default lightline)
set statusline=%<%f\ %h%m%r%=%y\ %P%8(%l,%v%)\|

augroup appearance
  autocmd!
  if s:is_windows
    " maximize window in windows
    autocmd GUIEnter * simalt ~x
    set guifont=DejaVu_Sans_Mono:h9
  else
    set guifont=DejaVu\ Sans\ Mono\ 9
  endif
  " resize windows/splits when the window is resized
  autocmd VimResized * :wincmd =
augroup END

" only show these in the active buffer/window
augroup active_elements
  autocmd!
  autocmd WinEnter * set cursorline number relativenumber
  autocmd WinLeave * set nocursorline nonumber norelativenumber
  autocmd BufEnter * set cursorline number relativenumber
  autocmd BufLeave * set nocursorline nonumber norelativenumber
augroup END

" this makes the trailing space indicator invisible
" while typing, otherwise it would drive me crazy
augroup no_trail_in_insert
  autocmd!
  autocmd InsertEnter * :set listchars-=trail:â– 
  autocmd InsertLeave * :set listchars+=trail:â– 
augroup END

" }}}
" ===========================================================================
" KEY MAPPINGS {{{
" ===========================================================================
" anything related to plugins is located
" under its respective PLUGIN SETTINGS section

" ---------------------------------------------------------------------------
" REMAPS OF DEFAULTS {{{
" ---------------------------------------------------------------------------
" it's good to remember these in case I'm stuck with vanilla vi/vim

" disabled
noremap  <F1>    <Nop>
inoremap <F1>    <Nop>
noremap  <Space> <Nop>
noremap  <S-CR>  <Nop>

" Enter command line mode
noremap <CR> :
" make Enter/CR work normally in quickfix and command-window
augroup enter_correctly
  autocmd!
  autocmd BufReadPost quickfix nnoremap <buffer> <CR> <CR>
  autocmd CmdWinEnter * nnoremap <buffer> <CR> <CR>
augroup END

" go back to last buffer
noremap <Backspace> <C-^>

" Y yanks until EOL, more like D and C
" yy still yanks the whole line
nnoremap Y y$

" U as a more sensible redo
nnoremap U <C-R>

" Q to replay the q register
" I have never wanted to use Ex mode.
nnoremap Q @q

" [S]plit line (sister to [J]oin lines) {{{
" cc still changes the whole line
function! s:SplitLine()
  normal! i^gk
  silent! substitute/\v +$//
  silent! nohlsearch
  call histdel("search", -1)
  normal! $
endfunction
" }}}
nnoremap S :call <SID>SplitLine()<CR>

" visually select the last paste or change
nnoremap gp `[v`]

" going to the exact column is more useful most of the time
nnoremap ` '
nnoremap ' `

" jump list (previous, next)
nnoremap <C-P> <C-O>
nnoremap <C-N> <C-I>

" window management
nnoremap <Tab>      <C-W>
nnoremap <S-Tab>    <C-W>c
nnoremap <Tab><Tab> <C-W><C-P>

" easier scrolling (I just prefer not reaching for e and y)
nnoremap <C-J> <C-E>
nnoremap <C-K> <C-Y>

" open current file's directory
if !exists("g:loaded_vinegar")
  nnoremap - :e <C-R>=fnameescape(expand('%:p:h'))<CR>/<CR>
endif

" open current working directory
nnoremap + :e .<CR>

" move by wrapped lines instead of line numbers, unless the motion is counted
noremap <expr> j (v:count? 'j' : 'gj')
noremap <expr> k (v:count? 'k' : 'gk')

" { and } skip over closed folds
nnoremap <expr> } foldclosed(search('^$', 'Wn')) == -1 ? "}" : "}j}"
nnoremap <expr> { foldclosed(search('^$', 'Wnb')) == -1 ? "{" : "{k{"

" automatically jump to the end of pasted text
" useful for pasting multi-lines of text
xnoremap p p`]
nnoremap p p`]

" esc to stop inserting in Neovim terminal mode
if s:is_nvim
  tnoremap <Esc><Esc> <C-\><C-N>
endif

" }}}
" ---------------------------------------------------------------------------
" NORMAL MAPS {{{
" ---------------------------------------------------------------------------

" expand-o-brackets
inoremap {<Tab> {<CR>}<Esc>O
inoremap {; {<CR>};<Esc>O

" change directories (minor time saver)
nnoremap cd :cd<Space>

" quickly manage buffers
nnoremap gb :ls<CR>:b<Space>
nnoremap gB :ls!<CR>:b<Space>

" resizing windows
noremap <C-Left>  <C-W><
noremap <C-Up>    <C-W>+
noremap <C-Down>  <C-W>-
noremap <C-Right> <C-W>>

" (go search numbers) search for all numbers
nnoremap <silent> g/# /\v\d+<CR>

" q to quit help {{{
" (from Junegunn's vimrc)
function! s:helpquit()
  if &buftype == 'help'
    nnoremap <buffer> q :bd<CR>
  endif
endfunction
augroup q_for_quit
  autocmd!
  autocmd BufEnter *.txt call s:helpquit()
augroup END
" }}}

" Source vimscript operator {{{
" Nice for quick vimscript testing.
function! SourceVimscript(type)
  let sel_save = &selection
  let &selection = "inclusive"
  let reg_save = @"
  if a:type == 'line'
    silent execute "normal! '[V']y"
  elseif a:type == 'char'
    silent execute "normal! `[v`]y"
  elseif a:type == "visual"
    silent execute "normal! gvy"
  elseif a:type == "currentline"
    silent execute "normal! yy"
  endif
  let @" = substitute(@", '\n\s*\\', '', 'g')
  " source the content
  @"
  let &selection = sel_save
  let @" = reg_save
endfunction
" }}}
nnoremap <silent> g: :set opfunc=SourceVimscript<CR>g@
vnoremap <silent> g: :<C-U>call SourceVimscript("visual")<CR>
nnoremap <silent> g:: :call SourceVimscript("currentline")<CR>

" toggle pastemode (fits well with unimpaired.vim)
set pastetoggle=cop

" %% for current buffer file name
" :: for current buffer file path
" (credit to romainl's vimrc)
cnoremap %% <C-R>=fnameescape(expand('%'))<CR>
cnoremap :: <C-R>=fnameescape(expand('%:p:h'))<CR>/

" }}}
" ---------------------------------------------------------------------------
" LEADER MAPS {{{
" ---------------------------------------------------------------------------

" leader the easiest key to reach
let mapleader = "\<Space>"

" find a file
nnoremap <Leader>f :find<Space>

" write file
nnoremap <Leader>w :write<CR>

" open vimrc
nnoremap <silent> <Leader>v :edit $MYVIMRC<CR>:FollowSymlink<CR>
nnoremap <silent> <Leader>V :tabnew $MYVIMRC<CR>:FollowSymlink<CR>

" search for brackets
noremap <Leader>{ ?[{}]<CR>
noremap <Leader>} /[{}]<CR>

" toggle centering the cursor
nnoremap <Leader>zz :let &scrolloff=999-&scrolloff<CR>:set so?<CR>

" toggle location & quickfix lists {{{
" (from vimwiki)
function! GetBufferList()
  redir =>buflist
  silent! ls!
  redir END
  return buflist
endfunction

function! ToggleList(bufname, pfx)
  let buflist = GetBufferList()
  for bufnum in map(filter(split(buflist, '\n'), 'v:val =~ "'.a:bufname.'"'), 'str2nr(matchstr(v:val, "\\d\\+"))')
    if bufwinnr(bufnum) != -1
      exec(a:pfx.'close')
      return
    endif
  endfor
  if a:pfx == 'l' && len(getloclist(0)) == 0
    echohl ErrorMsg
    echo "Location List is Empty."
    return
  endif
  let winnr = winnr()
  exec(a:pfx.'open')
  if winnr() != winnr
    " wincmd p
  endif
endfunction
" }}}
nnoremap <silent> <Leader>l :call ToggleList("Location List", 'l')<CR>
nnoremap <silent> <Leader>q :call ToggleList("Quickfix List", 'c')<CR>

" alternate between header and source files {{{
" <Leader>A or :A
" (credit to junegunn's vimrc)
function! s:A()
  let name = expand('%:r')
  let ext = tolower(expand('%:e'))
  let sources = ['c', 'cc', 'cpp', 'cxx']
  let headers = ['h', 'hh', 'hpp', 'hxx']
  for pair in [[sources, headers], [headers, sources]]
    let [set1, set2] = pair
    if index(set1, ext) >= 0
      for h in set2
        let aname = name.'.'.h
        for a in [aname, toupper(aname)]
          if filereadable(a)
            execute 'e' a
            return
          end
        endfor
      endfor
    endif
  endfor
endfunction
command! A call <SID>A()
" }}}
nnoremap <Leader>A :A<CR>

" Quick scratch buffer
nnoremap <Leader>S :enew<CR>:f scratch<CR>:setl bt=nofile bh=delete<CR>:set ft=

" }}}
" ---------------------------------------------------------------------------

" }}}
" ===========================================================================
" FUNCTIONS, COMMANDS, MISC {{{
" ===========================================================================
" everything else goes here

" delete all buffers and open Startify (if possible){{{
function! s:RestartVim()
  if exists('g:loaded_startify')
    SClose
  else
    %bdelete
    setl buftype=nofile bufhidden=wipe
  endif
endfunction "}}}
command! RestartVim call <SID>RestartVim()

" toggle syntax highlighting {{{
function! s:ToggleSyntaxHighlighting()
  let s:folds = &foldlevel
  if exists("g:syntax_on")
    syntax off
  else
    syntax on
  endif
  let &foldlevel=s:folds
endfunction "}}}
command! ToggleSyntax call <SID>ToggleSyntaxHighlighting()

" DoubleView {{{
" Vertically split the current buffer into two windows which will stay
" scroll-bound together.  Allows you to see twice as much as before!
" (disables the wrap setting and expands folds to work better)
" (PS: this is kind of janky, but I like it anyway)
function! s:DoubleView()
  let s:DV_so=&scrolloff
  set scrolloff=0 noscrollbind nowrap nofoldenable
  botright vsplit
  normal! Ljzt
  setl scrollbind
  wincmd p
  setl scrollbind
  let &scrolloff=s:DV_so
endfunction }}}
command! DoubleView call <SID>DoubleView()

" Vim 'screensaver' by kssmbi {{{
" (PS: this is pointless, but I like it anyway)
function! s:RotateString(string)
  let split_string = split(a:string, '\zs')
  return join(split_string[-1:] + split_string[:-2], '')
endfunction

function! s:RotateLine(line, leading_whitespace, trailing_whitespace)
  return substitute(
        \ a:line,
        \ '^\(' . a:leading_whitespace . '\)\(.\{-}\)\(' . a:trailing_whitespace . '\)$',
        \ '\=submatch(1) . <SID>RotateString(submatch(2)) . submatch(3)',
        \ ''
        \ )
endfunction

function! s:RotateLines()
  let saved_view = winsaveview()
  let first_visible_line = line('w0')
  let last_visible_line = line('w$')
  let lines = getline(first_visible_line, last_visible_line)
  let leading_whitespace = map(
        \ range(len(lines)),
        \ 'matchstr(lines[v:val], ''^\s*'')'
        \ )
  let trailing_whitespace = map(
        \ range(len(lines)),
        \ 'matchstr(lines[v:val], ''\s*$'')'
        \ )
  try
    while 1 " <C-c> to exit
      let lines = map(
            \ range(len(lines)),
            \ '<SID>RotateLine(lines[v:val], leading_whitespace[v:val], trailing_whitespace[v:val])'
            \ )
      call setline(first_visible_line, lines)
      redraw
      sleep 50m
    endwhile
  finally
    if &modified
      silent undo
    endif
    call winrestview(saved_view)
  endtry
endfunction
" }}}
command! ScreenSaver call <SID>RotateLines()

" Follow symlinks when opening a file {{{
" Sources:
"  - https://github.com/tpope/vim-fugitive/issues/147#issuecomment-7572351
"  - http://www.reddit.com/r/vim/comments/yhsn6/is_it_possible_to_work_around_the_symlink_bug/c5w91qw
if s:is_windows
  function! MyFollowSymlink(...)
    let lit = a:0 ? a:1 : '%:p'
    let fpath = expand(lit)
    let recur = a:0 > 1 ? a:2 : 10
    if !recur
      return
    endif
    let matstr = '<SYMLINK..\s\+' . expand(lit.':t') . ' ['
    " check if it's a symlink
    if (match(system('dir ' . fpath . '*'), matstr) == -1)
      " check if parent dir is symlink
      call MyFollowSymlink(lit.':h', recur-1)
    else
      " extract symlink path
      let substr = '.*<SYMLINK..\s\+' . expand(lit.':t') . ' \[\(.\{-}\)\].*'
      let fpath = substitute(system('dir ' . fpath . '*'), substr, '\1', "")
      " figure out current file's path
      let resolvedfile = filereadable(fpath) ?  fpath :
            \ matchstr(expand(lit), '..').findfile(expand('%:t'), fpath, '**')
      " 'follow' the symlink
      if bufexists(resolvedfile)
        exec 'buffer ' . resolvedfile . ' | bw '.expand(lit)
      else
        exec 'file ' . resolvedfile . ' | w! | doautocmd BufRead | bw '.expand(lit)
      endif
    endif
  endfunction
  " autocmd BufReadPost * call MyFollowSymlink('<afile>:p')
else
  function! MyFollowSymlink(...)
    let fname = a:0 ? a:1 : expand('%')
    if getftype(fname) != 'link'
      return
    endif
    let resolvedfile = fnameescape(resolve(fname))
    exec 'echo ' . resolvedfile
  endfunction
  " autocmd BufReadPost * call MyFollowSymlink('<afile>')
endif
" }}}
command! FollowSymlink call MyFollowSymlink()

" Clear Trailing White spaces
cabbrev ctw s/\s\+$//e

" ...
augroup top_o_file
  autocmd!
  autocmd BufEnter d*_*y.txt normal! gg
augroup END

" }}}
" ===========================================================================
" PLUGIN SETTINGS {{{
" ===========================================================================
" OCD's beware: arbitrarily sorted list ahead!

" don't load these settings without plugins
if isdirectory(expand(s:myvimdir . "/plugged"))

  " Fugitive {{{
  nnoremap <Leader>gs :Gstatus<CR>
  nnoremap <Leader>gd :Gdiff<CR>
  nnoremap <Leader>gD :Gdiff HEAD<CR>
  nnoremap <Leader>gc :Gcommit<CR>
  nnoremap <Leader>gl :Git log<CR>
  nnoremap <Leader>gp :Git push<CR>
  nnoremap <Leader>gw :Gwrite<CR>
  nnoremap <Leader>gr :Gremove<CR>
  " }}}

  " Dispatch {{{
  nnoremap <Leader>m :Make<CR>
  " }}}

  " Tagbar {{{
  nnoremap <Leader>t :TagbarToggle<CR>
  " }}}

  " switch.vim {{{
  let g:switch_mapping = "<Leader>s"
  "}}}

  " UltiSnips {{{
  " disable this in favor of Supertab's 'tab literal'
  " it's <C-Tab> by default
  let g:UltiSnipsListSnippets='<C-}>'
  " }}}

  " Goyo {{{
  " toggle Goyo (distraction free editing)
  nnoremap <Leader>G :Goyo<CR>
  " }}}

  " vim-easy-align {{{
  " Start interactive EasyAlign in visual mode (e.g. vipga)
  vmap ga <Plug>(EasyAlign)
  " Start interactive EasyAlign for a motion/text object (e.g. gaip)
  nmap ga <Plug>(EasyAlign)
  " }}}

  " Sayonara {{{
  " close buffer
  nnoremap gs :Sayonara<CR>
  " close buffer, but not window
  nnoremap gS :Sayonara!<CR>
  " prompt to close vim when closing the last file
  let g:sayonara_confirm_quit = 1
  " see: 'q to quit help' under KEY MAPPINGS/NORMAL MAPS
  function! s:helpquit()
    if &buftype == 'help'
      nnoremap <buffer> q :Sayonara<CR>
    endif
  endfunction
  augroup q_for_quit
    autocmd!
    autocmd BufEnter *.txt call s:helpquit()
  augroup END
  " }}}

  " Dirvish {{{
  " disable netrw
  let g:loaded_netrw = 1
  let g:loaded_netrwPlugin = 1
  " open current file's directory
  nnoremap <silent> - :Dirvish %<CR>
  " open current working directory
  nnoremap <silent> + :Dirvish<CR>
  augroup my_dirvish_events
    autocmd!
    " I use <CR> to enter cmdline mode,
    " so use o to open
    autocmd FileType dirvish
          \ nnoremap <buffer> <CR> :
          \|xnoremap <buffer> <CR> :
          \|nnoremap <buffer> o :call dirvish#open("edit", 0)<CR>
          \|xnoremap <buffer> o :call dirvish#open("edit", 0)<CR>
          \|nnoremap <buffer> h :call dirvish#open("split", 0)<CR>
          \|xnoremap <buffer> h :call dirvish#open("split", 0)<CR>
          \|nnoremap <buffer> l :call dirvish#open("vsplit", 0)<CR>
          \|xnoremap <buffer> l :call dirvish#open("vsplit", 0)<CR>
    " map gh to hide "hidden" files. (Unix only)
    autocmd FileType dirvish nnoremap <buffer> gh
          \ :g@\v/\.[^\/]+/?$@d<CR>
    autocmd FileType dirvish set nobuflisted
  augroup END
  " }}}

  " gtfo.vim {{{
  let g:gtfo#terminals = { 'win' : 'C:\WINDOWS\system32\cmd.exe /k' }
  " }}}

  " CtrlP {{{
  " ignore .git folders to speed up searches
  let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']
  let g:ctrlp_max_depth = 15
  " include hidden files
  let g:ctrlp_show_hidden = 1
  " open multiple files in ONE window
  let g:ctrlp_open_multiple_files = '1vr'
  " ctrl-o to open specifically
  let g:ctrlp_arg_map = 1
  " change default CtrlP mapping
  let g:ctrlp_map = '<Leader>p'
  " shortcuts
  nnoremap <Leader>p :CtrlP<CR>
  nnoremap <Leader>b :CtrlPBuffer<CR>
  nnoremap <Leader><C-E> :CtrlPMRU<CR>
  nnoremap <Leader><C-L> :CtrlPLine<CR>
  nnoremap <Leader><C-P> :CtrlP<Space>
  " }}}

  " undotree {{{
  nnoremap <Leader>u :UndotreeToggle<CR>
  function g:Undotree_CustomMap()
    nunmap <buffer> <Tab>
  endfunc
  " }}}

  " wimproved.vim {{{
  " toggle fullscreen
  nnoremap <F11> :WToggleFullscreen<CR>
  augroup wimproved
    autocmd!
    " make Windows less ugly
    autocmd GUIEnter * silent! WToggleClean
  augroup END
  " }}}

  " indentLine {{{
  nnoremap <Leader>i :IndentLinesToggle<CR>
  " let g:indentLine_fileType = ['c', 'cpp']
  " use custom filetype detection for vim-plug compatibility
  let g:indentLine_enabled = 0
  augroup ft_indentLine
    autocmd!
    autocmd FileType c,cpp IndentLinesEnable
  augroup END
  " }}}

  " Rainbow Parenthesis {{{
  augroup rainbow_filetypes
    autocmd!
    autocmd FileType c,cpp,vim,sh,dosbatch RainbowParentheses
  augroup END
  " }}}

  " Startify {{{
  augroup startify_maps
    autocmd!
    " I use <CR> to enter command line mode,
    " so use o to open files instead.
    autocmd User Startified unmap <buffer> <CR>
    autocmd User Startified nmap <buffer> o <Plug>(startify-open-buffers)
    autocmd User Startified setlocal relativenumber number
  augroup END
  let g:ctrlp_reuse_window = 'startify'
  let g:startify_files_number = 6
  let g:startify_session_delete_buffers = 1
  let g:startify_session_persistence = 1
  let g:startify_custom_header = [
        \ '                                                                            ',
        \ '       ___________________________                                          ',
        \ '      /                           \                                         ',
        \ '      |     VIM - Vi IMproved     |                                         ',
        \ '      |    -------------------    |                                         ',
        \ '      |  by Bram Moolenaar et al. |                                         ',
        \ '      \__________________   ______/            __----~~~~~~~~~~~------___   ',
        \ '                         \ /        .  .   ~~//====......          __--~ ~~ ',
        \ '                    -.    \\      \_|//     |||\\  ~~~~~~::::... /~         ',
        \ '                 ___-==_   \   _-~o~  \/    |||  \\            _/~~-        ',
        \ '         __---~~~.==~||\=_    -_--~/_-~|-   |\\   \\        _/~             ',
        \ '     _-~~     .=~    |  \\-_    ''-~7  /-   /  ||    \      /               ',
        \ '   .~       .~       |   \\ -_    /  /-   /   ||      \   /                 ',
        \ '  /  ____  /         |     \\ ~-_/  /|- _/   .||       \ /                  ',
        \ '  |~~    ~~|--~~~~--_ \     ~==-/   | \~--===~~        .\                   ',
        \ '           ''         ~-|      /|    |-~\~~       __--~~                    ',
        \ ] " Thanks http://www.asciiworld.com
  " }}}

  " lightline {{{
  nnoremap <silent> <Leader>L }:exec lightline#toggle()<CR>``
  " compatibility with other plugins {{{
  let g:lightline = {
        \ 'colorscheme': 'powerline',
        \ 'active': {
        \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ], ['ctrlpmark'] ],
        \   'right': [ [ 'syntastic', 'lineinfo' ], ['percent'], [ 'fileformat', 'fileencoding', 'filetype' ] ]
        \ },
        \ 'component_function': {
        \   'fugitive': 'LightLineFugitive',
        \   'filename': 'LightLineFilename',
        \   'fileformat': 'LightLineFileformat',
        \   'filetype': 'LightLineFiletype',
        \   'fileencoding': 'LightLineFileencoding',
        \   'mode': 'LightLineMode',
        \   'ctrlpmark': 'CtrlPMark',
        \ },
        \ 'component_expand': {
        \   'syntastic': 'SyntasticStatuslineFlag',
        \ },
        \ 'component_type': {
        \   'syntastic': 'error',
        \ },
        \ 'subseparator': { 'left': '|', 'right': '|' }
        \ }

  function! LightLineModified()
    return &ft =~ 'help' ? '' : &modified ? '+' : &modifiable ? '' : '-'
  endfunction

  function! LightLineReadonly()
    return &ft !~? 'help' && &readonly ? 'RO' : ''
  endfunction

  function! LightLineFilename()
    let fname = expand('%:t')
    return fname == 'ControlP' ? g:lightline.ctrlp_item :
          \ fname == '__Tagbar__' ? g:lightline.fname :
          \ fname =~ '__Gundo\|NERD_tree' ? '' :
          \ &ft == 'vimfiler' ? vimfiler#get_status_string() :
          \ &ft == 'unite' ? unite#get_status_string() :
          \ &ft == 'vimshell' ? vimshell#get_status_string() :
          \ ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
          \ ('' != fname ? fname : '[No Name]') .
          \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
  endfunction

  function! LightLineFugitive()
    try
      if expand('%:t') !~? 'Tagbar\|Gundo\|NERD' && &ft !~? 'vimfiler' && exists('*fugitive#head')
        let mark = ''  " edit here for cool mark
        let _ = fugitive#head()
        return strlen(_) ? mark._ : ''
      endif
    catch
    endtry
    return ''
  endfunction

  function! LightLineFileformat()
    return winwidth(0) > 70 ? &fileformat : ''
  endfunction

  function! LightLineFiletype()
    return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
  endfunction

  function! LightLineFileencoding()
    return winwidth(0) > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
  endfunction

  function! LightLineMode()
    let fname = expand('%:t')
    return fname == '__Tagbar__' ? 'Tagbar' :
          \ fname == 'ControlP' ? 'CtrlP' :
          \ fname == '__Gundo__' ? 'Gundo' :
          \ fname == '__Gundo_Preview__' ? 'Gundo Preview' :
          \ winwidth(0) > 60 ? lightline#mode() : ''
  endfunction

  function! CtrlPMark()
    if expand('%:t') =~ 'ControlP'
      call lightline#link('iR'[g:lightline.ctrlp_regex])
      return lightline#concatenate([g:lightline.ctrlp_prev, g:lightline.ctrlp_item
            \ , g:lightline.ctrlp_next], 0)
    else
      return ''
    endif
  endfunction

  let g:ctrlp_status_func = {
        \ 'main': 'CtrlPStatusFunc_1',
        \ 'prog': 'CtrlPStatusFunc_2',
        \ }

  function! CtrlPStatusFunc_1(focus, byfname, regex, prev, item, next, marked)
    let g:lightline.ctrlp_regex = a:regex
    let g:lightline.ctrlp_prev = a:prev
    let g:lightline.ctrlp_item = a:item
    let g:lightline.ctrlp_next = a:next
    return lightline#statusline(0)
  endfunction

  function! CtrlPStatusFunc_2(str)
    return lightline#statusline(0)
  endfunction

  let g:tagbar_status_func = 'TagbarStatusFunc'

  function! TagbarStatusFunc(current, sort, fname, ...) abort
    let g:lightline.fname = a:fname
    return lightline#statusline(0)
  endfunction
  " }}}}
  " }}}

endif

" }}}
" ===========================================================================
