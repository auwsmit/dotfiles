" vim: set foldmethod=marker:
" Author: Austin Smith <auwsmit@gmail.com>
" Source: https://gitlab.com/auwsmit/dotfiles
" Best viewed with vim's folds (see :help folds)

" ===========================================================================
" STARTUP {{{
" ===========================================================================

" detect OS for OS-specific options
let s:is_cygwin = has('win32unix') || has('win64unix')
let s:is_mac = has('gui_macvim') || has('mac')
let s:is_windows = has('win32') || has('win64')

" detect .vim directory
let s:myvimdir ="~/.vim"
if s:is_windows
  let s:myvimdir ="~/vimfiles"
elseif has('nvim')
  let s:myvimdir ="~/.config/nvim"
endif

" map leader early for plugins
let mapleader = "\<space>"
let maplocalleader = "\\"

" }}}
" ===========================================================================
" PLUGINS {{{
" ===========================================================================

" setup vim-plug
call plug#begin()

" all plugin config autocmds in one group
augroup vimrc_plugin_config
  au!

  " ---------------------------------------------------------------------------
  " FILE/BUFFER PLUGINS {{{
  " ---------------------------------------------------------------------------

  Plug 'tpope/vim-eunuch'
  Plug 'tpope/vim-fugitive' " {{{
  nnoremap <leader>gs :Gstatus<cr>
  nnoremap <leader>gd :Gdiff<cr>
  nnoremap <leader>gD :Gdiff HEAD<cr>
  nnoremap <leader>gc :Gcommit<cr>
  nnoremap <leader>gl :Git log<cr>
  nnoremap <leader>gp :Git push<cr>
  nnoremap <leader>gw :Gwrite<cr>
  nnoremap <leader>gg :Ggrep<space>
  " hide fugitive buffers to reduce buffer list clutter
  au BufReadPost fugitive://* set bufhidden=delete
  " }}}
  Plug 'romainl/vim-tinyMRU' " {{{
  nnoremap <leader>r :ME<space>
  " }}}
  Plug 'justinmk/vim-gtfo' " {{{
  let g:gtfo#terminals = { 'win' : 'C:\WINDOWS\system32\cmd.exe /k' }
  " }}}
  Plug 'justinmk/vim-dirvish' " {{{
  " disable netrw
  let g:loaded_netrw = 1
  let g:loaded_netrwPlugin = 1
  " map gh to hide "hidden" files. (Unix only)
  au FileType dirvish nnoremap <buffer> gh
        \ :g@\v/\.[^\/]+/?$@d<cr>
  au FileType dirvish set nobuflisted
  " }}}
  Plug 'mhinz/vim-sayonara', { 'on': 'Sayonara' } " {{{
  " close buffer
  nnoremap gs :Sayonara<cr>
  " close buffer, don't close window
  nnoremap gS :Sayonara!<cr>
  " prompt to close vim when closing the last file
  let g:sayonara_confirm_quit = 1
  " see: 'q to quit help' under KEY MAPPINGS/NORMAL MAPS
  function! s:helpquit()
    if &buftype == 'help'
      nnoremap <buffer> q :Sayonara<cr>
    endif
  endfunction
  au BufEnter *.txt call s:helpquit()
  " }}}
  if s:is_windows " CtrlP is the best FZF.vim alternative for Windows :(
    Plug 'ctrlpvim/ctrlp.vim' " {{{

    " include hidden files
    let g:ctrlp_show_hidden = 1
    " open multiple files in ONE window
    let g:ctrlp_open_multiple_files = '1vr'
    " ctrl-o to open specifically
    let g:ctrlp_arg_map = 1
    " change default CtrlP mapping
    let g:ctrlp_map = '<leader>p'

    " free <space> in operator mode
    au VimEnter * ounmap <leader>p

    nnoremap <leader>- :CtrlPCurFile<cr>
    nnoremap <leader>+ :CtrlPCurWD<cr>
    nnoremap <leader>b :CtrlPBuffer<cr>
    nnoremap <leader>ff :CtrlP<space>
    nnoremap <leader>fl :CtrlPLine<cr>
    nnoremap <leader>fb :CtrlPLine %<cr>
    nnoremap <leader>ft :CtrlPBufTagAll<cr>
    nnoremap <leader>fr :CtrlPMRU<cr>
    " }}}
  else
    Plug 'junegunn/fzf.vim' " {{{
    Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
    let g:fzf_command_prefix = 'Fzf'

    nnoremap <leader>- :FZF <c-r>=fnameescape(expand('%:p:h'))<cr>/<cr>
    nnoremap <leader>+ :FZF<cr>
    nnoremap <leader>b :FzfBuffers<cr>
    nnoremap <leader>ff :FZF<space>
    nnoremap <leader>fl :FzfLines<cr>
    nnoremap <leader>fb :FzfBLines<cr>
    nnoremap <leader>ft :FzfTags<cr>
    nnoremap <leader>fr :FzfHistory<cr>
    nnoremap <leader>fh :FzfHelptags<cr>
    nnoremap <leader>f: :FzfHistory:<cr>
    nnoremap <leader>f/ :FzfHistory/<cr>
    nnoremap <leader>fg :FzfGFiles<cr>
    nnoremap <leader>fs :FzfGFiles?<cr>
    nnoremap <leader>fc :FzfCommits<cr>
    nnoremap <leader><space> :FzfCommands<cr>

    " adapt to colorscheme
    let g:fzf_colors =
          \ { 'fg':    ['fg', 'Normal'],
          \ 'bg':      ['bg', 'Normal'],
          \ 'hl':      ['fg', 'Comment'],
          \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
          \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
          \ 'hl+':     ['fg', 'Statement'],
          \ 'info':    ['fg', 'PreProc'],
          \ 'border':  ['fg', 'Ignore'],
          \ 'prompt':  ['fg', 'Conditional'],
          \ 'pointer': ['fg', 'Exception'],
          \ 'marker':  ['fg', 'Keyword'],
          \ 'spinner': ['fg', 'Label'],
          \ 'header':  ['fg', 'Comment'] }
    " }}}
  endif
  if has('python') || has('python3')
    Plug 'ludovicchabant/ctrlp-py-matcher' " {{{
    " TODO check for when FelikZ/ctrlp-py-matcher updates
    let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' }
    " }}}
  endif

  " }}}
  " ---------------------------------------------------------------------------
  " OPERATOR PLUGINS {{{
  " ---------------------------------------------------------------------------

  Plug 'tpope/vim-commentary'
  Plug 'machakann/vim-sandwich' " (surround.vim alternative) {{{
  " surround-like mappings
  let g:sandwich_no_default_key_mappings = 1
  let g:operator_sandwich_no_default_key_mappings = 1
  au VimEnter * runtime macros/sandwich/keymap/surround.vim
  " }}}
  Plug 'tommcdo/vim-exchange' " {{{
  " evil-exchange bindings
  nmap gxx <plug>(ExchangeLine)
  nmap gX  <plug>(ExchangeClear)
  nmap gx  <plug>(Exchange)
  xmap gx  <plug>(Exchange)
  " }}}

  " }}}
  " ---------------------------------------------------------------------------
  " TEXT OBJECT PLUGINS {{{
  " ---------------------------------------------------------------------------

  Plug 'machakann/vim-sandwich'
  Plug 'kana/vim-textobj-user' |
        \ Plug 'kana/vim-textobj-line' |
        \ Plug 'kana/vim-textobj-entire'   |
        \ Plug 'kana/vim-textobj-indent'   |
        \ Plug 'kana/vim-textobj-function' |
        \ Plug 'coderifous/textobj-word-column.vim'
  Plug 'junegunn/vim-after-object' " {{{
  au VimEnter * call after_object#enable([']', '['], '=', ':', '-', '#', ' ')
  " }}}

  " }}}
  " ---------------------------------------------------------------------------
  " MOTION/NAVIGATION PLUGINS {{{
  " ---------------------------------------------------------------------------

  Plug 'romainl/vim-cool'
  Plug 'chaoren/vim-wordmotion'
  Plug 'justinmk/vim-ipmotion' " {{{
  " Skip over closed folds with { and }
  let g:ip_skipfold = 1
  "}}}
  Plug 'auwsmit/vim-slash' | Plug 'henrik/vim-indexed-search' " {{{
  let g:indexed_search_mappings = 0
  " slash + indexed-search, also centered results
  noremap <silent> <plug>(slash-after) :<c-u>ShowSearchIndex<cr>zz
  xunmap <plug>(slash-after)
  " }}}
  Plug 'majutsushi/Tagbar',  { 'on': 'TagbarToggle' } " {{{
  nnoremap <leader>t :TagbarToggle<cr>
  " }}}

  " }}}
  " ---------------------------------------------------------------------------
  " SNIPPET/COMPLETION PLUGINS {{{
  " ---------------------------------------------------------------------------

  Plug 'ervandew/supertab'
  Plug 'tpope/vim-endwise',
        \ { 'for': [ 'vim', 'c', 'cpp', 'lua', 'ruby', 'sh', 'zsh', 'snippets' ] }
  Plug 'prabirshrestha/asyncomplete.vim' " {{{
  Plug 'prabirshrestha/async.vim'
  " asyncomplete.vim general settings {{{

  let g:asyncomplete_auto_popup = 0
  let g:asyncomplete_remove_duplicates = 1
  function! s:ToggleAsyncomplete()
    silent! let g:asyncomplete_auto_popup =
          \ g:asyncomplete_auto_popup ? 0 : 1
  endfunction
  nnoremap <leader>a :call <sid>ToggleAsyncomplete()<cr>
  " inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
  " inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
  " inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<cr>"
  imap <c-space> <Plug>(asyncomplete_force_refresh)
  " }}}
  Plug 'prabirshrestha/asyncomplete-lsp.vim' " {{{
  Plug 'prabirshrestha/vim-lsp'

  if executable('pyls')
    " pip install python-language-server
    au User lsp_setup call lsp#register_server({
          \ 'name': 'pyls',
          \ 'cmd': {server_info->['pyls']},
          \ 'whitelist': ['python'],
          \ })
  endif
  if executable('clangd')
    au User lsp_setup call lsp#register_server({
          \ 'name': 'clangd',
          \ 'cmd': {server_info->['clangd']},
          \ 'whitelist': ['c', 'cpp', 'objc', 'objcpp'],
          \ })
  endif
  " }}}
  Plug 'prabirshrestha/asyncomplete-buffer.vim' " {{{

  au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#buffer#get_source_options({
        \ 'name': 'buffer',
        \ 'whitelist': ['*'],
        \ 'blacklist': ['go'],
        \ 'completor': function('asyncomplete#sources#buffer#completor'),
        \ }))
  " }}}
  Plug 'yami-beta/asyncomplete-omni.vim' " {{{

  au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#omni#get_source_options({
        \ 'name': 'omni',
        \ 'whitelist': ['*'],
        \ 'blacklist': ['html'],
        \ 'completor': function('asyncomplete#sources#omni#completor')
        \  }))
  " }}}
  Plug 'prabirshrestha/asyncomplete-necosyntax.vim' " {{{
  Plug 'Shougo/neco-syntax'

  au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#necosyntax#get_source_options({
        \ 'name': 'necosyntax',
        \ 'whitelist': ['*'],
        \ 'completor': function('asyncomplete#sources#necosyntax#completor'),
        \ }))
  " }}}
  Plug 'prabirshrestha/asyncomplete-necovim.vim' " {{{
  Plug 'Shougo/neco-vim'

  au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#necovim#get_source_options({
        \ 'name': 'necovim',
        \ 'whitelist': ['vim'],
        \ 'completor': function('asyncomplete#sources#necovim#completor'),
        \ }))
  " }}}
  if has('python3')
    Plug 'prabirshrestha/asyncomplete-ultisnips.vim' " {{{

    au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#ultisnips#get_source_options({
          \ 'name': 'ultisnips',
          \ 'whitelist': ['*'],
          \ 'completor': function('asyncomplete#sources#ultisnips#completor'),
          \ }))
    " }}}
  endif
  if executable('ctags')
    Plug 'prabirshrestha/asyncomplete-tags.vim' " {{{

    au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#tags#get_source_options({
          \ 'name': 'tags',
          \ 'whitelist': ['c'],
          \ 'completor': function('asyncomplete#sources#tags#completor'),
          \ 'config': {
          \    'max_file_size': 20000000,
          \  },
          \ }))
    " }}}
  endif
  " }}}
  if has('python3')
    Plug 'SirVer/UltiSnips' " {{{
    let g:UltiSnipsExpandTrigger="<c-j>"
    " }}}
  endif

  " }}}
  " ---------------------------------------------------------------------------
  " FORMAT/SYNTAX PLUGINS {{{
  " ---------------------------------------------------------------------------

  Plug 'junegunn/gv.vim',    { 'on': 'GV' }
  Plug 'justinmk/vim-syntax-extra', { 'for': ['c', 'cpp'] }
  Plug 'junegunn/vim-easy-align',   { 'on': ['<plug>(EasyAlign)', 'EasyAlign'] } " {{{
  " Start interactive EasyAlign in visual mode (e.g. vipga)
  vmap ga <plug>(EasyAlign)
  " Start interactive EasyAlign for a motion/text object (e.g. gaip)
  nmap ga <plug>(EasyAlign)
  " }}}

  " }}}
  " ---------------------------------------------------------------------------
  " APPEARANCE/UI PLUGINS {{{
  " ---------------------------------------------------------------------------

  Plug 'gcavallanti/vim-noscrollbar'
  Plug 'auwsmit/vim-active-numbers' " My plugin <3
  Plug 'auwsmit/badcanine' " (it's badwolf)
  Plug 'itchyny/lightline.vim' " {{{
  nnoremap <silent> <leader>L }:exec lightline#toggle()<cr>``

  " compatibility with other plugins {{{
  let g:lightline = {
        \ 'colorscheme': 'powerline',
        \ 'active': {
        \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ], ['ctrlpmark'] ],
        \   'right': [ [ 'syntastic', 'lineinfo' ], ['percent'], [ 'fileformat', 'fileencoding', 'filetype' ] ]
        \ },
        \ 'component_function': {
        \   'fugitive': 'LightLineFugitive',
        \   'filename': 'LightLineFilename',
        \   'fileformat': 'LightLineFileformat',
        \   'filetype': 'LightLineFiletype',
        \   'fileencoding': 'LightLineFileencoding',
        \   'mode': 'LightLineMode',
        \   'ctrlpmark': 'LightLineCtrlPMark',
        \ },
        \ 'component_expand': {
        \   'syntastic': 'SyntasticStatuslineFlag',
        \ },
        \ 'component_type': {
        \   'syntastic': 'error',
        \ },
        \ 'subseparator': { 'left': '|', 'right': '|' }
        \ }

  let g:lightline.component = { 'percent': '%{noscrollbar#statusline()}' }

  function! LightLineModified()
    return &ft =~ 'help' ? '' : &modified ? '+' : &modifiable ? '' : '-'
  endfunction

  function! LightLineReadonly()
    return &ft !~? 'help' && &readonly ? 'RO' : ''
  endfunction

  function! LightLineFilename()
    let fname = expand('%:t')
    return fname == 'ControlP' ? g:lightline.ctrlp_item :
          \ fname == '__Tagbar__' ? g:lightline.fname :
          \ fname =~ '__Gundo\|NERD_tree' ? '' :
          \ &ft == 'vimfiler' ? vimfiler#get_status_string() :
          \ &ft == 'unite' ? unite#get_status_string() :
          \ &ft == 'vimshell' ? vimshell#get_status_string() :
          \ ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
          \ ('' != fname ? fname : '[No Name]') .
          \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
  endfunction

  function! LightLineFugitive()
    try
      if expand('%:t') !~? 'Tagbar\|Gundo\|NERD' && &ft !~? 'vimfiler' && exists('*fugitive#head')
        let mark = ''  " edit here for cool mark
        let _ = fugitive#head()
        return strlen(_) ? mark._ : ''
      endif
    catch
    endtry
    return ''
  endfunction

  function! LightLineFileformat()
    return winwidth(0) > 70 ? &fileformat : ''
  endfunction

  function! LightLineFiletype()
    return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
  endfunction

  function! LightLineFileencoding()
    return winwidth(0) > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
  endfunction

  function! LightLineMode()
    let fname = expand('%:t')
    return fname == '__Tagbar__' ? 'Tagbar' :
          \ fname == 'ControlP' ? 'CtrlP' :
          \ fname == '__Gundo__' ? 'Gundo' :
          \ fname == '__Gundo_Preview__' ? 'Gundo Preview' :
          \ winwidth(0) > 60 ? lightline#mode() : ''
  endfunction

  function! LightLineCtrlPMark()
    if expand('%:t') =~ 'ControlP'
      call lightline#link('iR'[g:lightline.ctrlp_regex])
      return lightline#concatenate([g:lightline.ctrlp_prev, g:lightline.ctrlp_item
            \ , g:lightline.ctrlp_next], 0)
    else
      return ''
    endif
  endfunction

  let g:ctrlp_status_func = {
        \ 'main': 'CtrlPStatusFunc_1',
        \ 'prog': 'CtrlPStatusFunc_2',
        \ }

  function! CtrlPStatusFunc_1(focus, byfname, regex, prev, item, next, marked)
    let g:lightline.ctrlp_regex = a:regex
    let g:lightline.ctrlp_prev = a:prev
    let g:lightline.ctrlp_item = a:item
    let g:lightline.ctrlp_next = a:next
    return lightline#statusline(0)
  endfunction

  function! CtrlPStatusFunc_2(str)
    return lightline#statusline(0)
  endfunction

  let g:tagbar_status_func = 'TagbarStatusFunc'

  function! TagbarStatusFunc(current, sort, fname, ...) abort
    let g:lightline.fname = a:fname
    return lightline#statusline(0)
  endfunction
  " }}}

  " }}}
  Plug 'junegunn/vim-peekaboo' " {{{
  let g:peekaboo_delay = 350
  " }}}
  Plug 'junegunn/goyo.vim',   { 'on': 'Goyo' } " {{{
  " toggle Goyo (distraction free editing)
  nnoremap <leader>G :Goyo<cr>
  " }}}
  Plug 'junegunn/rainbow_parentheses.vim', { 'on': 'RainbowParentheses' } " {{{
  au FileType c,cpp,vim,sh,dosbatch,lisp RainbowParentheses
  " }}}
  Plug 'Yggdroot/indentLine', { 'on': 'IndentLinesEnable' } " {{{
  nnoremap <leader>i :IndentLinesToggle<cr>
  " use custom filetype detection for better vim-plug compatibility
  let g:indentLine_enabled = 0
  let g:indentLine_fileType = ['']
  au FileType c,cpp IndentLinesEnable
  " }}}
  if s:is_windows
    Plug 'kkoenig/wimproved.vim' " {{{
    " toggle fullscreen
    nnoremap <F11> :WToggleFullscreen<cr>
    " Fix GVim's ugly window border
    au GUIEnter * WToggleClean
    " }}}
  endif

  " }}}
  " ---------------------------------------------------------------------------
  " MISC/CONVENIENCE PLUGINS " {{{
  " ---------------------------------------------------------------------------

  Plug 'tpope/vim-rsi'
  Plug 'tpope/vim-repeat'
  Plug 'tpope/vim-sleuth'
  Plug 'tpope/vim-unimpaired'
  Plug 'Konfekt/FastFold'
  Plug 'dietsche/vim-lastplace'
  Plug 'romainl/vim-qf'
  Plug 'tweekmonster/startuptime.vim'
  Plug 'mbbill/undotree',    { 'on': 'UndotreeToggle' } " {{{
  nnoremap <leader>u :UndotreeToggle<cr>
  function! g:Undotree_CustomMap()
    nunmap <buffer> <tab>
  endfunction
  " }}}
  if executable('ctags')
    Plug 'ludovicchabant/vim-gutentags'
  endif

  " }}}
  " ---------------------------------------------------------------------------

augroup END

" initialize vim-plug
call plug#end()

" }}}
" ===========================================================================
" GENERAL SETTINGS {{{
" ===========================================================================

" sensible options for me
set hidden
set incsearch
set ignorecase
set smartcase
set autoread
set nolazyredraw
set gdefault
set showcmd
set nostartofline
set path+=**
set modeline
set sidescroll=8
set backspace=indent,eol,start
set history=10000
set undolevels=10000
set complete=.,w,b,t
set synmaxcol=1024
set nrformats-=octal
set fileformat=unix
set virtualedit=all
set sessionoptions-=options
set sessionoptions-=folds
set clipboard^=unnamedplus,unnamed
if s:is_windows
  set makeprg=build.bat
endif
silent! set mouse=a
set vb t_vb=
if exists('&belloff')
  set belloff=all
endif

" command-line completion settings
set wildmenu
set wildmode=full
set wildignore+=.hg,.git,.svn                    " Version control
set wildignore+=*.aux,*.out,*.toc                " LaTeX intermediate files
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg   " binary images
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
set wildignore+=*.spl                            " compiled spelling word lists
set wildignore+=*.sw?                            " Vim swap files
set wildignore+=*.DS_Store                       " OSX garbage

" backups, swapfiles, & undofiles in one place
let s:tempdir=expand(s:myvimdir."/tmp")
if !isdirectory(expand(s:tempdir))
  call mkdir(expand(s:tempdir), "p")
endif
set backup
let &backupdir=s:tempdir
set swapfile
let &directory=s:tempdir
if has('persistent_undo')
  set undofile
  let &undodir=s:tempdir
endif

if s:is_windows && executable('grep')
  set grepprg=grep\ -n
endif

" autocmds
augroup vimrc_general
  au!

  " more accurate syntax highlighting
  au BufEnter * syntax sync fromstart

  " make 'nobuflisted' persist when editing a file
  if exists('##OptionSet')
    function! s:PersistNobl(type)
      if a:type == 'option'
        if &buflisted && exists('b:persist_nobl')
          unlet b:persist_nobl
        else
          let b:persist_nobl = 1
        endif
      elseif exists('b:persist_nobl')
        if b:persist_nobl
          setl nobuflisted
        endif
      endif
    endfunction
    au OptionSet buflisted call <sid>PersistNobl('option')
    au BufEnter * call <sid>PersistNobl('buf')
  endif

augroup END

" }}}
" ===========================================================================
" APPEARANCE AND FORMATTING {{{
" ===========================================================================
" some settings will be overwritten when certain filetypes are detected
" see: filetype-indent-on & ftplugins

" default tab settings
set smarttab
set shiftwidth=4 softtabstop=-1 expandtab

" indenting/formatting
set autoindent
set smartindent " TODO: try cindent
set textwidth=80
set encoding=utf-8

" mostly aesthetic options
set hlsearch
set cpoptions+=$
set foldlevel=999
set foldmethod=indent
set guioptions=
set laststatus=2
set linebreak
set list
set listchars=tab:»\ ,extends:›,precedes:‹,nbsp:·,trail:■
set nonumber relativenumber
set numberwidth=1
set ruler
set splitright
set t_Co=256
if has('linebreak')
  set showbreak=«
  silent! set breakindent
else
  set listchars+=eol:¬
endif

silent! colorscheme badcanine

" fallback default colorscheme
if !exists('g:colors_name')
  syntax enable
  colorscheme desert
endif

" standard status line if lightline isn't enabled
" (pretty much the same layout as default lightline)
set statusline=%<%f\ %h%m%r%=%y
if exists('g:noscrollbar_loaded')
  set statusline+=\ %{noscrollbar#statusline()}
else
  set statusline+=\ %P
endif
execute 'set statusline+=%8(%l,%v%)\ '

" Disable Background Color Erase (BCE) so that color schemes
" render properly when inside 256-color tmux and GNU screen.
if &term =~ '256color'
  set t_ut=
endif

augroup vimrc_appearance_and_formatting
  au!

  " I want these format options by default
  au FileType * set formatoptions=rq1j

  if s:is_windows
    " Maximize window
    au GUIEnter * simalt ~x
    " Fonts: glorious notepad default
    set guifont=Consolas:h9
  else
    " Unix deserves a nicer font
    set guifont=DejaVu\ Sans\ Mono\ 9
  endif

  " resize vim-windows when program window is resized
  au VimResized * :wincmd =

  " this makes the trailing space indicator invisible
  " while typing, otherwise it would drive me crazy
  au InsertEnter * :set listchars-=trail:■
  au InsertLeave * :set listchars+=trail:■

augroup END

" }}}
" ===========================================================================
" KEY MAPPINGS {{{
" ===========================================================================
" anything related to plugins is located
" under its respective PLUGINS section

" ---------------------------------------------------------------------------
" REMAPS OF DEFAULTS {{{
" ---------------------------------------------------------------------------
" it's good to remember these in case I'm stuck with vanilla vi/vim

" disabled
noremap  <f1>    <nop>
inoremap <f1>    <nop>
noremap  <s-cr>  <nop>
noremap  <space> <nop>
" for c<space>
ounmap <space>

" go back to last buffer
noremap <backspace> <c-^>

" Y yanks until EOL, more like D and C
" yy still yanks the whole line
nmap Y y$

" U as a more sensible redo
nnoremap U <c-r>

" Q to replay the q register
" I have never wanted to use Ex mode.
nnoremap Q @q

" [S]plit lines (sister to [J]oin line) {{{
" cc still changes the whole line
function! s:SplitLine()
  exe "normal! i\<cr>\<esc>^gk"
  silent! substitute/\v +$//
  silent! nohlsearch
  call histdel("search", -1)
  normal! $
endfunction
" }}}
nnoremap S :call <sid>SplitLine()<cr>

" center when jumping {{{
function! s:Center()
  let prev_so = &scrolloff
  set scrolloff=999
  redraw
  let &scrolloff = prev_so
endfunction
" }}}
" new jump list mnemonic: previous, next
nnoremap <silent> <c-p> <c-o>:call <sid>Center()<cr>
nnoremap <silent> <c-n> <c-i>:call <sid>Center()<cr>

" easier scrolling
nnoremap <c-j> <c-d>
nnoremap <c-k> <c-u>

" org-style fold viewing
nnoremap <tab> za
nnoremap <s-tab> zM

" open current file's directory
nnoremap - :e <c-r>=fnameescape(expand('%:p:h'))<cr>/<cr>

" open current working directory
nnoremap + :e .<cr>

" | and _ for split windows
nnoremap <expr><silent> \| !v:count ? "<c-w>v<c-w><right>" : '\|'
nnoremap <expr><silent> _  !v:count ? "<c-w>s<c-w><down>"  : '_'

" move by wrapped lines instead of line numbers, unless the motion is counted
" also set a mark for movements across 5 lines or more
nnoremap <expr> j (v:count >= 5 ? "m'" . v:count : '').(v:count? 'j' : 'gj')
nnoremap <expr> k (v:count >= 5 ? "m'" . v:count : '').(v:count? 'k' : 'gk')
vnoremap <expr> j (v:count >= 5 ? "m'" . v:count : '').(v:count? 'j' : 'gj')
vnoremap <expr> k (v:count >= 5 ? "m'" . v:count : '').(v:count? 'k' : 'gk')

" automatically jump to the end of pasted text
" useful for pasting multi-lines of text
xnoremap p p`]
nnoremap p p`]

" visually select the last change or yank
nnoremap gp `[v`]

" i_CTRL-[ finger slip
inoremap <c-]> <esc>

" }}}
" ---------------------------------------------------------------------------
" NORMAL MAPS {{{
" ---------------------------------------------------------------------------

" Emacs cancel blasphemy
inoremap <c-g> <esc>
cnoremap <c-g> <c-c>
xnoremap <c-g> <esc>

" from tpope's rsi
inoremap <c-a> <c-o>^
inoremap <expr> <c-e> col('.')>strlen(getline('.'))<bar><bar>pumvisible()?"\<lt>C-E>":"\<lt>End>"

" expand-o-brackets
inoremap {<tab> {<cr>}<esc>O
inoremap {; {<cr>};<esc>O

" change directories (minor time saver)
nnoremap cd :cd<space>

" quickly manage buffers
nnoremap gb :ls<cr>:b<space>
nnoremap gB :ls!<cr>:b<space>

" resizing windows
noremap <c-left>  <c-w><
noremap <c-up>    <c-w>+
noremap <c-down>  <c-w>-
noremap <c-right> <c-w>>

" q to quit help {{{
" (from Junegunn's vimrc)
function! s:helpquit()
  if &buftype == 'help'
    nnoremap <buffer> q :bd<cr>
  endif
endfunction
augroup q_for_quit
  au!
  au BufEnter *.txt call s:helpquit()
augroup END
" }}}

" Source vimscript operator {{{
" Nice for quick vimscript testing.
function! s:SourceVimscript(type)
  let sel_save = &selection
  let &selection = "inclusive"
  let reg_save = @"
  if a:type == 'line'
    silent execute "normal! '[V']y"
  elseif a:type == 'char'
    silent execute "normal! `[v`]y"
  elseif a:type == "visual"
    silent execute "normal! gvy"
  elseif a:type == "currentline"
    silent execute "normal! yy"
  endif
  let @" = substitute(@", '\n\s*\\', '', 'g')
  " source the content
  @"
  let &selection = sel_save
  let @" = reg_save
endfunction
" }}}
nnoremap <silent> g: :set opfunc=<sid>SourceVimscript<cr>g@
vnoremap <silent> g: :<c-u>call <sid>SourceVimscript("visual")<cr>
nnoremap <silent> g:: :call <sid>SourceVimscript("currentline")<cr>

" %% for current buffer file name
" :: for current buffer file path
cnoremap %% <c-r>=fnameescape(expand('%'))<cr>
cnoremap :: <c-r>=fnameescape(expand('%:p:h'))<cr>/

" unimpaired.vim inspired
" toggle pastemode
nnoremap cop :set invpaste<CR>
" toggle centering the cursor
nnoremap coz :let &scrolloff=999-&scrolloff<cr>:set so?<cr>

" Delete & Replace operator {{{
" (credit to justinmk's init.vim)
" why?
" - repeatable
" - faster/more convenient than visual-replace
" - does not modify ' mark
" - DWIM behavior for linewise => characterwise
func! s:trimws_ml(s) abort "trim whitespace across multiple lines
  return substitute(a:s, '^\_s*\(.\{-}\)\_s*$', '\1', '')
endf
let s:rr_reg = '"'
func! s:set_reg(reg_name) abort
  let s:rr_reg = a:reg_name
endf
func! s:replace_without_yank(type) abort
  let rr_orig = getreg(s:rr_reg, 1) "save registers and types to restore later.
  let rr_type = getregtype(s:rr_reg)
  let ur_orig = getreg('"', 1)
  let ur_type = getregtype('"')
  let sel_save = &selection
  let &selection = "inclusive"
  let replace_curlin = (1==col("'[") && (col('$')==1 || col('$')==(col("']")+1)) && line("'[")==line("']"))

  if a:type ==? 'line' || replace_curlin
    exe "keepjumps normal! '[V']\"".s:rr_reg."p"
  elseif a:type ==? 'block'
    exe "keepjumps normal! `[\<c-v>`]\"".s:rr_reg."p"
  elseif a:type == 'visual'
    exe "keepjumps normal! gv\"".s:rr_reg."p"
  else
    "DWIM: if pasting linewise contents in a _characterwise_ motion, trim
    "      surrounding whitespace from the content to be pasted.
    if rr_type ==# "V"
      call setreg(s:rr_reg, s:trimws_ml(rr_orig), "v")
    endif
    exe "keepjumps normal! `[v`]\"".s:rr_reg."p"
  endif

  let &selection = sel_save
  call setreg('"',      ur_orig, ur_type)
  call setreg(s:rr_reg, rr_orig, rr_type)
endf

" }}}
nnoremap <silent> dr  :<c-u>call <sid>set_reg(v:register)<bar>set opfunc=<sid>replace_without_yank<cr>g@
nnoremap <silent> drr :<c-u>call <sid>set_reg(v:register)<cr>0:<c-u>set opfunc=<sid>replace_without_yank<cr>g@$
xnoremap <silent> R :<c-u>call <sid>set_reg(v:register)<bar>call <sid>replace_without_yank('visual')<cr>

" browse search results while
" searching.. with tab/s-tab
cnoremap <expr>  <tab>    getcmdtype() =~ '[?/]' ? '<c-g>' : feedkeys('<tab>', 'int')[1]
cnoremap <expr>  <s-tab>  getcmdtype() =~ '[?/]' ? '<c-t>' : feedkeys('<s-tab>', 'int')[1]

" }}}
" ---------------------------------------------------------------------------
" LEADER MAPS {{{
" ---------------------------------------------------------------------------
" See STARTUP for mapleader

" edit vimrc
nnoremap <silent> <leader>v :edit $MYVIMRC<cr>
nnoremap <silent> <leader>V :tabnew $MYVIMRC<cr>

" shortcuts
nnoremap <leader>s :write<cr>
nnoremap <leader>h :help<space>
" :help on the word under the cursor
nnoremap <leader>H :help <c-r><c-w><cr>

" save my pinky some stress
nnoremap <leader>; :
nnoremap <leader>w <c-w>

" circular windows
nnoremap <leader><tab> <c-w>w

" populate the location list with last search results
" useful for seeing the exact number of matches
nnoremap <leader>/ :lvim //g %<cr>

" search for all numbers
nnoremap <leader># /\v\d+<cr>

" search for all brackets
noremap <leader>{ ?[{}]<cr>
noremap <leader>} /[{}]<cr>
ounmap <leader>{
ounmap <leader>}

" toggle location & quickfix lists {{{
" (from vimwiki)
function! GetBufferList()
  redir =>buflist
  silent! ls!
  redir END
  return buflist
endfunction

function! ToggleList(bufname, pfx)
  let buflist = GetBufferList()
  for bufnum in map(filter(split(buflist, '\n'), 'v:val =~ "'.a:bufname.'"'), 'str2nr(matchstr(v:val, "\\d\\+"))')
    if bufwinnr(bufnum) != -1
      exec(a:pfx.'close')
      return
    endif
  endfor
  if a:pfx == 'l' && len(getloclist(0)) == 0
    echohl ErrorMsg
    echo "Location List is Empty."
    return
  endif
  let winnr = winnr()
  exec(a:pfx.'open')
  if winnr() != winnr
    wincmd p
  endif
endfunction
" }}}
nnoremap <silent> <leader>l :call ToggleList("Location List", 'l')<cr>
nnoremap <silent> <leader>q :call ToggleList("Quickfix List", 'c')<cr>

" alternate between header and source files {{{
" (credit to junegunn's vimrc)
function! s:A()
  let name = expand('%:r')
  let ext = tolower(expand('%:e'))
  let sources = ['c', 'cc', 'cpp', 'cxx']
  let headers = ['h', 'hh', 'hpp', 'hxx']
  for pair in [[sources, headers], [headers, sources]]
    let [set1, set2] = pair
    if index(set1, ext) >= 0
      for h in set2
        let aname = name.'.'.h
        for a in [aname, toupper(aname)]
          if filereadable(a)
            execute 'e' a
            return
          end
        endfor
      endfor
    endif
  endfor
endfunction
command! A call <sid>A()
" }}}
nnoremap <leader>A :A<cr>

" quick scratch buffer
nnoremap <leader>S :enew<cr>:setl bt=nofile bh=hide noswf<cr>:set ft=

" copy all to system clipboard
nnoremap \y ggVG"+y

" }}}
" ---------------------------------------------------------------------------

" }}}
" ===========================================================================
" MISCELLANEOUS {{{
" ===========================================================================
" Other functions, commands, settings,
" etc.  that don't fit elsewhere go here

" delete all buffers and open a scratch buffer
function! s:RestartVim()
  %bdelete
  setl buftype=nofile bufhidden=wipe
endfunction
command! -bar RestartVim call <sid>RestartVim()

" toggle syntax highlighting
" useful when Vim is crippled by its inefficient highlighting
function! s:ToggleSyntaxHighlighting()
  let s:folds = &foldlevel
  exec 'syntax '.(exists("g:syntax_on") ? 'off' : 'enable')
  let &foldlevel=s:folds
endfunction
command! ToggleSyntax call <sid>ToggleSyntaxHighlighting()

" DoubleView {{{
" Vertically split the current buffer into two windows which will stay
" scroll-bound together.  Allows you to see twice as much as before!
" (disables the wrap setting and expands folds to work better)
" (PS: this is kind of janky, but I like it anyway)
function! s:DoubleView()
  let s:DV_so=&scrolloff
  set scrolloff=0 noscrollbind nowrap nofoldenable
  botright vsplit
  normal! Ljzt
  setl scrollbind
  wincmd p
  setl scrollbind
  let &scrolloff=s:DV_so
endfunction " }}}
command! DoubleView call <sid>DoubleView()

" custom text objects
let s:separators = exists('g:loaded_targets') ? [ '`', '%']
      \ : [ '_', '.', ':', ',', ';', '<bar>', '/', '<bslash>', '*', '+', '%', '`' ]
for char in s:separators
  execute 'xnoremap i' . char . ' :<c-u>normal! T' . char . 'vt' . char . '<cr>'
  execute 'onoremap i' . char . ' :normal vi' . char . '<cr>'
  execute 'xnoremap a' . char . ' :<c-u>normal! F' . char . 'vf' . char . '<cr>'
  execute 'onoremap a' . char . ' :normal va' . char . '<cr>'
endfor

" Clear Trailing White spaces
cabbrev ctw s/\s\+$//e

" }}}
" ===========================================================================
