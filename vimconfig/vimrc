" vim: set foldmethod=marker:
" Author: Austin Smith <auwsmit@gmail.com>
" Source: https://gitlab.com/auwsmit/dotfiles
" Best viewed with vim's folds (see :help folds)

" ===========================================================================
" STARTUP {{{
" ===========================================================================

" shorter conditionals
let s:is_windows = (has('win32')  || has('win64'))
let s:has_python = (has('python') || has('python3'))

" detect .vim directory
let s:myvimdir ="~/.vim"
if s:is_windows
  let s:myvimdir ="~/vimfiles"
elseif has('nvim')
  let s:myvimdir ="~/.config/nvim"
endif

" }}}
" ===========================================================================
" PLUGINS {{{
" ===========================================================================

" setup vim-plug
call plug#begin()

" all plugin config autocmds in one group
augroup vimrc_plugin_config
  autocmd!

  " ---------------------------------------------------------------------------
  " FILE/BUFFER PLUGINS {{{
  " ---------------------------------------------------------------------------

  Plug 'tpope/vim-eunuch'
  Plug 'tpope/vim-projectionist'
  Plug 'tpope/vim-fugitive' " {{{
  nnoremap <space>gs :Gstatus<cr>
  nnoremap <space>gd :Gdiff<cr>
  nnoremap <space>gD :Gdiff HEAD<cr>
  nnoremap <space>gc :Gcommit<cr>
  nnoremap <space>gl :Git log<cr>
  nnoremap <space>gp :Git push<cr>
  nnoremap <space>gw :Gwrite<cr>
  nnoremap <space>gg :Ggrep<space>
  " hide fugitive buffers to reduce buffer list clutter
  au BufReadPost fugitive://* set bufhidden=delete
  " }}}
  Plug 'justinmk/vim-gtfo' " {{{
  let g:gtfo#terminals = { 'win' : 'C:\WINDOWS\system32\cmd.exe /k' }
  " }}}
  Plug 'justinmk/vim-dirvish' " {{{
  " disable netrw
  let g:loaded_netrw = 1
  let g:loaded_netrwPlugin = 1
  " map gh to hide "hidden" files. (Unix only)
  au FileType dirvish nnoremap <buffer> gh
        \ :g@\v/\.[^\/]+/?$@d<cr>
  au FileType dirvish set nobuflisted
  " }}}
  Plug 'mhinz/vim-sayonara', { 'on': 'Sayonara' } " {{{
  " close buffer + preserve windows
  nnoremap gs :Sayonara!<cr>
  " close buffer + close window
  nnoremap gS :Sayonara<cr>
  " prompt to close vim when closing the last file
  let g:sayonara_confirm_quit = 1
  " see: 'q to quit help' under KEY MAPPINGS/NORMAL MAPS
  fun! s:helpquit() abort
    if &buftype == 'help'
      nnoremap <buffer> q :Sayonara<cr>
    endif
  endfun
  au BufEnter *.txt call s:helpquit()
  " }}}
  if s:is_windows
     Plug 'Yggdroot/LeaderF' " {{{

     " options
     let g:Lf_CommandMap = {'<c-c>': ['<esc>', '<c-c>', '<c-g>']}
     let g:Lf_WindowHeight = 10
     let g:Lf_UseVersionControlTool = 0
     let g:Lf_FollowLinks = 1
     let g:Lf_DefaultMode = 'FullPath'
     let g:Lf_StlColorscheme = 'powerline'

     nnoremap <space>- :LeaderfFile <c-r>=fnameescape(expand('%:p:h'))<cr>/<cr>
     nnoremap <space>+ :LeaderfFile<cr>
     nnoremap <space>b :LeaderfBuffer<cr>
     nnoremap <space>r :LeaderfMru<cr>
     nnoremap <space>ff :LeaderfFile<space>
     nnoremap <space>fl :LeaderfLineAll<cr>
     nnoremap <space>fb :LeaderfLine<cr>
     nnoremap <space>ft :LeaderfTag<cr>
     nnoremap <space>fh :LeaderfHelp<cr>
     nnoremap <space>f: :LeaderfHistoryCmd<cr>
     nnoremap <space>f/ :LeaderfHistorySearch<cr>
     " }}}
    " Plug 'ctrlpvim/ctrlp.vim' " {{{
    " let s:has_ctrlp = 1

    " " include hidden files
    " let g:ctrlp_show_hidden = 1
    " " open multiple files in ONE window
    " let g:ctrlp_open_multiple_files = '1vr'
    " " ctrl-o to open specifically
    " let g:ctrlp_arg_map = 1
    " " change default CtrlP mapping
    " let g:ctrlp_map = '<space>p'

    " " free <space> in operator mode for c<space>
    " " (equivalent to cl and s.. I like having options)
    " au VimEnter * ounmap <space>p

    " nnoremap <space>- :CtrlPCurFile<cr>
    " nnoremap <space>+ :CtrlPCurWD<cr>
    " nnoremap <space>b :CtrlPBuffer<cr>
    " nnoremap <space>r :CtrlPMRU<cr>
    " nnoremap <space>ff :CtrlP<space>
    " nnoremap <space>fl :CtrlPLine<cr>
    " nnoremap <space>fb :CtrlPLine %<cr>
    " nnoremap <space>ft :CtrlPBufTagAll<cr>
    " " }}}
  else
    Plug 'junegunn/fzf.vim' " {{{
    Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
    let g:fzf_command_prefix = 'Fzf'

    nnoremap <space>- :FZF <c-r>=fnameescape(expand('%:p:h'))<cr>/<cr>
    nnoremap <space>+ :FZF<cr>
    nnoremap <space>b :FzfBuffers<cr>
    nnoremap <space>r :FzfHistory<cr>
    nnoremap <space>ff :FZF<space>
    nnoremap <space>fl :FzfLines<cr>
    nnoremap <space>fb :FzfBLines<cr>
    nnoremap <space>ft :FzfTags<cr>
    nnoremap <space>fh :FzfHelptags<cr>
    nnoremap <space>f: :FzfHistory:<cr>
    nnoremap <space>f/ :FzfHistory/<cr>
    nnoremap <space>fg :FzfGFiles<cr>
    nnoremap <space>fs :FzfGFiles?<cr>
    nnoremap <space>fc :FzfCommits<cr>
    nnoremap <space><space> :FzfCommands<cr>

    " adapt to colorscheme
    let g:fzf_colors =
          \ { 'fg':    ['fg', 'Normal'],
          \ 'bg':      ['bg', 'Normal'],
          \ 'hl':      ['fg', 'Comment'],
          \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
          \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
          \ 'hl+':     ['fg', 'Statement'],
          \ 'info':    ['fg', 'PreProc'],
          \ 'border':  ['fg', 'Ignore'],
          \ 'prompt':  ['fg', 'Conditional'],
          \ 'pointer': ['fg', 'Exception'],
          \ 'marker':  ['fg', 'Keyword'],
          \ 'spinner': ['fg', 'Label'],
          \ 'header':  ['fg', 'Comment'] }
    " }}}
  endif
  " if exists('s:has_ctrlp') && s:has_python
  "   Plug 'ludovicchabant/ctrlp-py-matcher' " {{{
  "   " TODO check for when FelikZ/ctrlp-py-matcher updates
  "   " see: https://github.com/FelikZ/ctrlp-py-matcher/pull/35
  "   let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' }
  "   " }}}
  " endif

  " }}}
  " ---------------------------------------------------------------------------
  " OPERATOR PLUGINS {{{
  " ---------------------------------------------------------------------------

  Plug 'tpope/vim-commentary'
  Plug 'machakann/vim-sandwich' " (surround.vim alternative) {{{
  " surround-like mappings
  let g:sandwich_no_default_key_mappings = 1
  let g:operator_sandwich_no_default_key_mappings = 1
  au VimEnter * runtime macros/sandwich/keymap/surround.vim
  " }}}
  Plug 'tommcdo/vim-exchange' " {{{
  " evil-exchange bindings
  nmap gxx <plug>(ExchangeLine)
  nmap gX  <plug>(ExchangeClear)
  nmap gx  <plug>(Exchange)
  xmap gx  <plug>(Exchange)
  " }}}

  " }}}
  " ---------------------------------------------------------------------------
  " TEXT OBJECT PLUGINS {{{
  " ---------------------------------------------------------------------------

  Plug 'machakann/vim-sandwich'
  Plug 'kana/vim-textobj-user' |
        \ Plug 'kana/vim-textobj-line' |
        \ Plug 'kana/vim-textobj-entire'   |
        \ Plug 'kana/vim-textobj-indent'   |
        \ Plug 'kana/vim-textobj-function' |
        \ Plug 'coderifous/textobj-word-column.vim'
  Plug 'junegunn/vim-after-object' " {{{
  au VimEnter * call after_object#enable([']', '['], '=', ':', '-', '#', ' ')
  " }}}

  " }}}
  " ---------------------------------------------------------------------------
  " MOTION/NAVIGATION PLUGINS {{{
  " ---------------------------------------------------------------------------

  Plug 'romainl/vim-cool'
  Plug 'chaoren/vim-wordmotion'
  Plug 'justinmk/vim-ipmotion' " {{{
  " Skip over closed folds with { and }
  let g:ip_skipfold = 1
  " }}}
  Plug 'auwsmit/vim-slash' | Plug 'henrik/vim-indexed-search' " {{{
  let g:indexed_search_mappings = 0
  " slash + indexed-search, also centered results
  noremap <silent> <plug>(slash-after) :<c-u>ShowSearchIndex<cr>zz
  xunmap <plug>(slash-after)
  " }}}
  Plug 'majutsushi/Tagbar',  { 'on': 'TagbarToggle' } " {{{
  nnoremap <space>t :TagbarToggle<cr>
  " }}}

  " }}}
  " ---------------------------------------------------------------------------
  " SNIPPET/COMPLETION PLUGINS {{{
  " ---------------------------------------------------------------------------

  Plug 'ervandew/supertab'
  Plug 'tpope/vim-endwise',
        \ { 'for': [ 'vim', 'c', 'cpp', 'lua', 'ruby', 'sh', 'zsh', 'snippets' ] }
  if s:has_python
    Plug 'SirVer/UltiSnips'
  endif

  " }}}
  " ---------------------------------------------------------------------------
  " FORMAT/SYNTAX PLUGINS {{{
  " ---------------------------------------------------------------------------

  Plug 'justinmk/vim-syntax-extra', { 'for': ['c', 'cpp'] }
  Plug 'junegunn/vim-easy-align',   { 'on': ['<plug>(EasyAlign)', 'EasyAlign'] } " {{{
  " Start interactive EasyAlign in visual mode (e.g. vipga)
  xmap ga <plug>(EasyAlign)
  " Start interactive EasyAlign for a motion/text object (e.g. gaip)
  nmap ga <plug>(EasyAlign)
  " }}}

  " }}}
  " ---------------------------------------------------------------------------
  " APPEARANCE/UI PLUGINS {{{
  " ---------------------------------------------------------------------------

  Plug 'xtal8/traces.vim'
  Plug 'auwsmit/badcanine' " (it's badwolf)
  Plug 'itchyny/lightline.vim' " {{{

  nnoremap <silent> <space>L }:execute lightline#toggle()<cr>``

  " layout + compatibility with other plugins {{{
  let g:lightline = {
        \ 'colorscheme': 'mypowerline',
        \ 'active': {
        \   'left': [ ['lineinfo'], [ 'mode', 'paste' ],
        \             [ 'fugitive', 'filename' ], ['ctrlpmark'] ],
        \   'right': [ ['percent'],
        \              [ 'fileformat', 'fileencoding', 'filetype' ] ]
        \ },
        \ 'inactive': {
        \   'left': [ ['lineinfo'], ['filename'] ],
        \   'right': [ ['percent'] ]
        \ },
        \ 'component': {
        \   'percent': '%3{LightLinePercent()}',
        \ },
        \ 'component_function': {
        \   'fugitive': 'LightLineFugitive',
        \   'filename': 'LightLineFilename',
        \   'fileformat': 'LightLineFileformat',
        \   'filetype': 'LightLineFiletype',
        \   'fileencoding': 'LightLineFileencoding',
        \   'mode': 'LightLineMode',
        \   'ctrlpmark': 'LightLineCtrlPMark',
        \ },
        \ 'subseparator': { 'left': '|', 'right': '|' }
        \ }

  " emacs-style percent
  fun! LightLinePercent()
    return line('w0') == 1 && line('w$') == line('$') ? 'All'
    \: line('.') == 1 ? 'Top'
    \: line('.') == line('$') ? 'Bot'
    \: float2nr(100*(1.0*line('.')/line('$'))).'%'
  endfun

  let g:lightline.mode_map = {
        \ 'n' : 'N',
        \ 'i' : 'I',
        \ 'R' : 'R',
        \ 'v' : 'V',
        \ 'V' : 'VL',
        \ "\<C-v>": 'VB',
        \ 'c' : 'C',
        \ 's' : 'S',
        \ 'S' : 'SL',
        \ "\<C-s>": 'SB',
        \ 't': 'T',
        \ }

  fun! LightLineModified()
    return &ft =~ 'help' ? '' : &modified ? '+' : &modifiable ? '' : '-'
  endfun
  fun! LightLineReadonly()
    return &ft !~? 'help' && &readonly ? 'RO' : ''
  endfun
  fun! LightLineFilename()
    let fname = expand('%:t')
    return fname == 'ControlP' ? g:lightline.ctrlp_item :
          \ fname == '__Tagbar__' ? g:lightline.fname :
          \ fname =~ 'undotree_*\|diffpanel_*' ? '' :
          \ ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
          \ ('' != fname ? fname : '[No Name]') .
          \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
  endfun

  fun! LightLineFugitive()
    try
      if expand('%:t') !~? 'Tagbar\|NERD' && &ft !~? 'vimfiler' && exists('*fugitive#head')
        let mark = 'β '
        let _ = fugitive#head()
        return strlen(_) ? mark._ : ''
      endif
    catch
    endtry
    return ''
  endfun

  fun! LightLineFileformat()
    return winwidth(0) > 70 ? &fileformat : ''
  endfun
  fun! LightLineFiletype()
    return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
  endfun
  fun! LightLineFileencoding()
    return winwidth(0) > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
  endfun
  fun! LightLineMode()
    let fname = expand('%:t')
    return fname == '__Tagbar__' ? 'Tagbar' :
          \ fname == 'ControlP' ? 'CtrlP' :
          \ fname =~ 'undotree_*\|diffpanel_*' ? '' :
          \ lightline#mode()
  endfun

  fun! LightLineCtrlPMark()
    if expand('%:t') =~ 'ControlP'
      call lightline#link('iR'[g:lightline.ctrlp_regex])
      return lightline#concatenate([g:lightline.ctrlp_prev, g:lightline.ctrlp_item
            \ , g:lightline.ctrlp_next], 0)
    else
      return ''
    endif
  endfun
  let g:ctrlp_status_func = {
        \ 'main': 'CtrlPStatusFunc_1',
        \ 'prog': 'CtrlPStatusFunc_2',
        \ }
  fun! CtrlPStatusFunc_1(focus, byfname, regex, prev, item, next, marked)
    let g:lightline.ctrlp_regex = a:regex
    let g:lightline.ctrlp_prev = a:prev
    let g:lightline.ctrlp_item = a:item
    let g:lightline.ctrlp_next = a:next
    return lightline#statusline(0)
  endfun
  fun! CtrlPStatusFunc_2(str)
    return lightline#statusline(0)
  endfun
  let g:tagbar_status_func = 'TagbarStatusFunc'
  fun! TagbarStatusFunc(current, sort, fname, ...) abort
    let g:lightline.fname = a:fname
    return lightline#statusline(0)
  endfun
  " }}}

  " }}}
  Plug 'junegunn/vim-peekaboo' " {{{
  let g:peekaboo_delay = 350
  " }}}
  Plug 'junegunn/goyo.vim',   { 'on': 'Goyo' } " {{{
  " toggle Goyo (distraction free editing)
  nnoremap <space>G :Goyo<cr>
  " }}}
 Plug 'junegunn/rainbow_parentheses.vim', { 'on': 'RainbowParentheses' } " {{{
 au FileType c,cpp,vim,sh,dosbatch,lisp RainbowParentheses
 " }}}
  Plug 'Yggdroot/indentLine', { 'on': 'IndentLinesEnable' } " {{{
  nnoremap <space>I :IndentLinesToggle<cr>
  " use custom filetype detection for better vim-plug compatibility
  let g:indentLine_enabled = 0
  let g:indentLine_fileType = ['']
  au FileType c,cpp IndentLinesEnable
  " }}}
  if s:is_windows
    Plug 'kkoenig/wimproved.vim' " {{{
    " toggle fullscreen
    nnoremap <F11> :WToggleFullscreen<cr>
    " Fix GVim's ugly window border
    au GUIEnter * WToggleClean
    " }}}
  endif

  " }}}
  " ---------------------------------------------------------------------------
  " MISC/CONVENIENCE PLUGINS " {{{
  " ---------------------------------------------------------------------------

  Plug 'tpope/vim-rsi'
  Plug 'tpope/vim-repeat'
  Plug 'tpope/vim-sleuth'
  Plug 'tpope/vim-unimpaired'
  Plug 'Konfekt/FastFold'
  Plug 'dietsche/vim-lastplace'
  Plug 'romainl/vim-qf'
  Plug 'junegunn/gv.vim',    { 'on': 'GV' }
  Plug 'xolox/vim-session' " {{{
  Plug 'xolox/vim-misc'
  let g:session_autosave = 0
  let g:session_autoload = 0
  " }}}
  Plug 'mbbill/undotree',    { 'on': 'UndotreeToggle' } " {{{
  nnoremap <space>u :UndotreeToggle<cr>
  fun! g:Undotree_CustomMap()
    nunmap <buffer> <tab>
  endfun
  " }}}
  if executable('ctags')
    Plug 'ludovicchabant/vim-gutentags'
  endif

  " }}}
  " ---------------------------------------------------------------------------

augroup END

" initialize vim-plug
call plug#end()

" }}}
" ===========================================================================
" GENERAL SETTINGS {{{
" ===========================================================================

" sensible options for me
set hidden
set incsearch
set ignorecase
set smartcase
set autoread
set nolazyredraw
set gdefault
set showcmd
set nostartofline
set path+=**
set modeline
set sidescroll=8
set backspace=indent,eol,start
set history=10000
set undolevels=10000
set complete=.,w,b,t
set synmaxcol=1024
set nrformats-=octal
set fileformat=unix
set virtualedit=all
set sessionoptions-=options
set sessionoptions-=folds
set clipboard^=unnamedplus,unnamed
set foldopen-=block
if s:is_windows
  set makeprg=build.bat
endif
silent! set mouse=a
set vb t_vb=
if exists('&belloff')
  set belloff=all
endif

" command-line completion settings
set wildmenu
set wildmode=full
set wildignore+=.hg,.git,.svn                    " Version control
set wildignore+=*.aux,*.out,*.toc                " LaTeX intermediate files
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg   " binary images
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
set wildignore+=*.spl                            " compiled spelling word lists
set wildignore+=*.sw?                            " Vim swap files
set wildignore+=*.DS_Store                       " OSX garbage

" backups, swapfiles, & undofiles in one place
let s:tempdir=expand(s:myvimdir."/tmp")
if !isdirectory(expand(s:tempdir))
  call mkdir(expand(s:tempdir), "p")
endif
set backup
let &backupdir=s:tempdir
set swapfile
let &directory=s:tempdir
if has('persistent_undo')
  set undofile
  let &undodir=s:tempdir
endif

if s:is_windows && executable('grep')
  set grepprg=grep\ -n
endif

" autocmds
augroup vimrc_general
  autocmd!

  " make 'nobuflisted' persist when editing a file
  if exists('##OptionSet')
    fun! s:PersistNobl(type) abort
      if a:type == 'option'
        if &buflisted && exists('b:persist_nobl')
          unlet b:persist_nobl
        else
          let b:persist_nobl = 1
        endif
      elseif exists('b:persist_nobl')
        if b:persist_nobl
          setl nobuflisted
        endif
      endif
    endfun
    au OptionSet buflisted call <sid>PersistNobl('option')
    au BufEnter * call <sid>PersistNobl('buf')
  endif

augroup END

" }}}
" ===========================================================================
" APPEARANCE AND FORMATTING {{{
" ===========================================================================
" some settings will be overwritten when certain filetypes are detected
" see: filetype-indent-on & ftplugins

" default tab settings
set smarttab
set shiftwidth=4 softtabstop=-1 expandtab

" indenting/formatting
set autoindent
set smartindent " TODO: try cindent
set textwidth=80
set encoding=utf-8

" mostly aesthetic options
set hlsearch
set cpoptions+=$
set foldlevel=999
set foldmethod=indent
set guioptions=
set laststatus=2
set linebreak
set list
set listchars=tab:»\ ,extends:›,precedes:‹,nbsp:·,trail:■
set nonumber norelativenumber
set numberwidth=1
set ruler
set splitright
set noshowmode
if has('linebreak')
  set showbreak=«
  silent! set breakindent
else
  set listchars+=eol:¬
endif

silent! colorscheme badcanine

" fallback default colorscheme
if !exists('g:colors_name')
  syntax enable
  colorscheme desert
endif

" my statusline
execute 'set statusline=[%l,%v]\ %<%f\ %h%m%r%=%y\ [%P] '

" Disable Background Color Erase (BCE) so that color schemes
" render properly when inside 256-color tmux and GNU screen.
if &term =~ '256color'
  set t_ut=
endif

augroup vimrc_appearance_and_formatting
  autocmd!

  " more accurate syntax highlighting
  au BufEnter *.vim syntax sync fromstart

  " I want these format options by default
  au FileType * set formatoptions=rq1j
  au VimEnter * set formatoptions=rq1j

  if s:is_windows
    " Maximize window
    au GUIEnter * simalt ~x
    " Fonts: glorious notepad default
    set guifont=Consolas:h9
  else
    " Unix deserves a nicer font
    set guifont=DejaVu\ Sans\ Mono\ 9
  endif

  " resize vim-windows when program window is resized
  au VimResized * :wincmd =

  " this makes the trailing space indicator invisible
  " while typing, otherwise it would drive me crazy
  au InsertEnter * :set listchars-=trail:■
  au InsertLeave * :set listchars+=trail:■

augroup END

" }}}
" ===========================================================================
" KEY MAPPINGS {{{
" ===========================================================================
" anything related to plugins is located
" under its respective PLUGINS section

" ---------------------------------------------------------------------------
" REMAPS OF DEFAULTS {{{
" ---------------------------------------------------------------------------
" it's good to remember these in case I'm stuck with vanilla vi/vim

" disabled
noremap  <f1>    <nop>
inoremap <f1>    <nop>
noremap  <s-cr>  <nop>
nnoremap <space> <nop>
xnoremap <space> <nop>

" go back to last buffer
nnoremap <backspace> <c-^>

" Y yanks until EOL, more like D and C
" yy still yanks the whole line
nnoremap Y y$

" U as a more sensible redo
nnoremap U <c-r>

" Q to replay the q register
" I have never wanted to use Ex mode.
nnoremap Q @q

" [S]plit lines (sister to [J]oin line) {{{
" cc still changes the whole line
fun! s:SplitLine() abort
  exe "normal! i\<cr>\<esc>^gk"
  silent! substitute/\v +$//
  silent! nohlsearch
  call histdel("search", -1)
  normal! $
endfun
" }}}
nnoremap S :call <sid>SplitLine()<cr>

" center when jumping {{{
fun! s:Center() abort
  let prev_so = &scrolloff
  set scrolloff=999
  redraw
  let &scrolloff = prev_so
endfun
" }}}
" new jump list mnemonic: previous, next
" (frees up CTRL-i AKA Tab)
nnoremap <silent> <c-p> <c-o>:call <sid>Center()<cr>
nnoremap <silent> <c-n> <c-i>:call <sid>Center()<cr>

" easier scrolling
nnoremap <c-j> <c-d>
nnoremap <c-k> <c-u>

" org-style fold viewing
" TODO: make functions that are even more accurate
nnoremap <tab> za
nnoremap <s-tab> zM

" open current file's directory
nnoremap - :e <c-r>=fnameescape(expand('%:p:h'))<cr>/<cr>

" open current working directory
nnoremap + :e .<cr>

" | and _ for split windows
nnoremap <expr><silent> \| !v:count ? "<c-w>v<c-w><right>" : '\|'
nnoremap <expr><silent> _  !v:count ? "<c-w>s<c-w><down>"  : '_'

" move by wrapped lines instead of line numbers, unless the motion is counted
" also set a mark for movements across 5 lines or more
nnoremap <expr> j (v:count >= 5 ? "m'" . v:count : '').(v:count? 'j' : 'gj')
nnoremap <expr> k (v:count >= 5 ? "m'" . v:count : '').(v:count? 'k' : 'gk')
xnoremap <expr> j (v:count >= 5 ? "m'" . v:count : '').(v:count? 'j' : 'gj')
xnoremap <expr> k (v:count >= 5 ? "m'" . v:count : '').(v:count? 'k' : 'gk')

" automatically jump to the end of pasted text
" useful for pasting multi-lines of text
xnoremap p p`]
nnoremap p p`]

" visually select the last change or yank
nnoremap gp `[v`]

" i_CTRL-[ finger slip
inoremap <c-]> <esc>

" }}}
" ---------------------------------------------------------------------------
" NORMAL MAPS {{{
" ---------------------------------------------------------------------------

" Emacs blasphemy
inoremap <c-g> <esc>
cnoremap <c-g> <c-c>
xnoremap <c-g> <esc>
nnoremap <c-h> :help<space>

" from tpope's rsi
inoremap <c-a> <c-o>^
inoremap <expr> <c-e> col('.')>strlen(getline('.'))<bar><bar>pumvisible()?"\<lt>C-E>":"\<lt>End>"

" expand-o-brackets
inoremap {<tab> {<cr>}<esc>O
inoremap {;<tab> {<cr>};<esc>O

" change directories (minor time saver)
nnoremap cd :cd<space>

" quickly manage buffers
nnoremap gb :ls<cr>:b<space>
nnoremap gB :ls!<cr>:b<space>

" resizing windows
noremap <c-left>  <c-w><
noremap <c-up>    <c-w>+
noremap <c-down>  <c-w>-
noremap <c-right> <c-w>>

" unimpaired.vim inspired
" toggle pastemode
nnoremap cop :set invpaste<CR>
" toggle centering the cursor
nnoremap coz :let &scrolloff=999-&scrolloff<cr>:set so?<cr>

" improved help mappings {{{
" (q to quit from Junegunn's vimrc)
fun! s:helpmaps() abort
  if &buftype == 'help'
    nnoremap <buffer> q :bd<cr>
    nnoremap <silent><buffer> <tab> :call search("\|\\S\\+\|")<cr>
    nnoremap <silent><buffer> <s-tab> :call search("\|\\S\\+\|",'b')<cr>
    nnoremap <buffer> <cr> <c-]>
  endif
endfun
augroup improved_help_maps
  autocmd!
  au BufEnter *.txt call s:helpmaps()
augroup END
" }}}

" Source vimscript operator {{{
" Nice for quick vimscript testing.
fun! s:SourceVimscript(type) abort
  let sel_save = &selection
  let &selection = "inclusive"
  let reg_save = @"
  if a:type == 'line'
    silent execute "normal! '[V']y"
  elseif a:type == 'char'
    silent execute "normal! `[v`]y"
  elseif a:type == "visual"
    silent execute "normal! gvy"
  elseif a:type == "currentline"
    silent execute "normal! yy"
  endif
  let @" = substitute(@", '\n\s*\\', '', 'g')
  " source the content
  @"
  let &selection = sel_save
  let @" = reg_save
endfun
" }}}
nnoremap <silent> g: :set opfunc=<sid>SourceVimscript<cr>g@
xnoremap <silent> g: :<c-u>call <sid>SourceVimscript("visual")<cr>
nnoremap <silent> g:: :call <sid>SourceVimscript("currentline")<cr>

" Delete & Replace operator {{{
" (credit to justinmk's init.vim)
" why?
" - repeatable
" - faster/more convenient than visual-replace
" - does not modify ' mark
" - DWIM behavior for linewise => characterwise
func! s:trimws_ml(s) abort "trim whitespace across multiple lines
  return substitute(a:s, '^\_s*\(.\{-}\)\_s*$', '\1', '')
endf
let s:rr_reg = '"'
func! s:set_reg(reg_name) abort
  let s:rr_reg = a:reg_name
endf
func! s:replace_without_yank(type) abort
  let rr_orig = getreg(s:rr_reg, 1) "save registers and types to restore later.
  let rr_type = getregtype(s:rr_reg)
  let ur_orig = getreg('"', 1)
  let ur_type = getregtype('"')
  let sel_save = &selection
  let &selection = "inclusive"
  let replace_curlin = (1==col("'[") && (col('$')==1 || col('$')==(col("']")+1)) && line("'[")==line("']"))

  if a:type ==? 'line' || replace_curlin
    exe "keepjumps normal! '[V']\"".s:rr_reg."p"
  elseif a:type ==? 'block'
    exe "keepjumps normal! `[\<c-v>`]\"".s:rr_reg."p"
  elseif a:type == 'visual'
    exe "keepjumps normal! gv\"".s:rr_reg."p"
  else
    "DWIM: if pasting linewise contents in a _characterwise_ motion, trim
    "      surrounding whitespace from the content to be pasted.
    if rr_type ==# "V"
      call setreg(s:rr_reg, s:trimws_ml(rr_orig), "v")
    endif
    exe "keepjumps normal! `[v`]\"".s:rr_reg."p"
  endif

  let &selection = sel_save
  call setreg('"',      ur_orig, ur_type)
  call setreg(s:rr_reg, rr_orig, rr_type)
endf

" }}}
nnoremap <silent> dr  :<c-u>call <sid>set_reg(v:register)<bar>set opfunc=<sid>replace_without_yank<cr>g@
nnoremap <silent> drr :<c-u>call <sid>set_reg(v:register)<cr>0:<c-u>set opfunc=<sid>replace_without_yank<cr>g@$
xnoremap <silent> R :<c-u>call <sid>set_reg(v:register)<bar>call <sid>replace_without_yank('visual')<cr>

" %% expands to current buffer file name
" :: expands to current buffer file path
cnoremap %% <c-r>=fnameescape(expand('%'))<cr>
cnoremap :: <c-r>=fnameescape(expand('%:p:h'))<cr>/

" browse search results while
" searching.. with tab/s-tab
cnoremap <expr>  <tab>    getcmdtype() =~ '[?/]' ? '<c-g>' : feedkeys('<tab>', 'int')[1]
cnoremap <expr>  <s-tab>  getcmdtype() =~ '[?/]' ? '<c-t>' : feedkeys('<s-tab>', 'int')[1]

if has('terminal')
  tnoremap <esc> <c-w>N
  tnoremap <c-g> <c-w>N
endif

" }}}
" ---------------------------------------------------------------------------
" LEADER MAPS {{{
" ---------------------------------------------------------------------------
" space is my leader

" edit vimrc
nnoremap <silent> <space>v :edit $MYVIMRC<cr>
nnoremap <silent> <space>V :tabnew $MYVIMRC<cr>

" shortcuts
nnoremap <space>s :write<cr>
nnoremap <space>h :help<space>
if maparg('<space><space>','n') == ''
  nnoremap <space><space> :
endif
nnoremap <space>; :
nnoremap <space>o <c-w>o
nnoremap <space>x <c-w>c
nnoremap <space>w <c-w>

" circular window navigation
nnoremap <space><tab> <c-w>w

" populate the location list with last search results
" useful for seeing the exact number of matches
nnoremap <space>/ :lvim //g %<cr>

" search for all numbers
nnoremap <space># /\v\d+<cr>

" search for brackets
nnoremap <space>[ ?[{}]<cr>
nnoremap <space>] /[{}]<cr>

" toggle location & quickfix lists {{{
" (from vimwiki)
fun! GetBufferList() abort
  redir =>buflist
  silent! ls!
  redir END
  return buflist
endfun

fun! ToggleList(bufname, pfx) abort
  let buflist = GetBufferList()
  for bufnum in map(filter(split(buflist, '\n'), 'v:val =~ "'.a:bufname.'"'), 'str2nr(matchstr(v:val, "\\d\\+"))')
    if bufwinnr(bufnum) != -1
      execute(a:pfx.'close')
      return
    endif
  endfor
  if a:pfx == 'l' && len(getloclist(0)) == 0
    echohl ErrorMsg
    echo "Location List is Empty."
    return
  endif
  let winnr = winnr()
  execute(a:pfx.'open')
  if winnr() != winnr
    wincmd p
  endif
endfun
" }}}
nnoremap <silent> <space>l :call ToggleList("Location List", 'l')<cr>
nnoremap <silent> <space>q :call ToggleList("Quickfix List", 'c')<cr>

" quick scratch buffer
nnoremap <space>S :enew<cr>:setl bt=nofile bh=hide noswf<cr>:set ft=

" toggle syntax highlighting {{{
" useful when Vim is crippled by its inefficient highlighting
fun! s:ToggleSyntaxHighlighting() abort
  let s:folds = &foldlevel
  execute 'syntax '.(exists("g:syntax_on") ? 'off' : 'enable')
  let &foldlevel=s:folds
endfun
command! ToggleSyntax call <sid>ToggleSyntaxHighlighting()
" }}}
nnoremap <space>ts :call <sid>ToggleSyntaxHighlighting()

" }}}
" ---------------------------------------------------------------------------

" }}}
" ===========================================================================
" MISCELLANEOUS {{{
" ===========================================================================
" Other functions, commands, settings,
" etc.  that don't fit elsewhere go here

" delete all buffers and open a scratch buffer
fun! s:RestartVim() abort
  %bdelete
  setl buftype=nofile bufhidden=wipe
endfun
command! -bar KillBuffers call <sid>RestartVim()

" DoubleView {{{
" Vertically split the current buffer into two windows which will stay
" scroll-bound together.  Allows you to see twice as much as before!
" (disables the wrap setting and expands folds to work better)
" (PS: this is kind of janky, but I like it anyway)
fun! s:DoubleView() abort
  let s:DV_so=&scrolloff
  set scrolloff=0 noscrollbind nowrap nofoldenable
  botright vsplit
  normal! Ljzt
  setl scrollbind
  wincmd p
  setl scrollbind
  let &scrolloff=s:DV_so
endfun " }}}
command! DoubleView call <sid>DoubleView()

" custom text objects
let s:separators = exists('g:loaded_targets') ? [ '`', '%']
      \ : [ '_', '.', ':', ',', ';', '<bar>', '/', '<bslash>', '*', '+', '%', '`' ]
for char in s:separators
  execute 'xnoremap i' . char . ' :<c-u>normal! T' . char . 'vt' . char . '<cr>'
  execute 'onoremap i' . char . ' :normal vi' . char . '<cr>'
  execute 'xnoremap a' . char . ' :<c-u>normal! F' . char . 'vf' . char . '<cr>'
  execute 'onoremap a' . char . ' :normal va' . char . '<cr>'
endfor
" Clear Trailing White spaces
cabbrev ctw s/\s\+$//e

" }}}
" ===========================================================================
