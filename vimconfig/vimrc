" vim: set foldmethod=marker:
" Author: Austin Smith <auwsmit@gmail.com>
" Source: https://github.com/auwsmit/dotfiles
" Best viewed with vim's folds (see :help folds)

" STARTUP {{{

let s:is_nvim = has('nvim')
let s:is_windows = has('win32')
let s:has_python = (has('python') || has('python3'))

" detect .vim directory
let g:myvimdir ="~/.vim"
if s:is_windows
  let g:myvimdir ="~/vimfiles"
elseif s:is_nvim
  let g:myvimdir ="~/.config/nvim"
endif
let g:myvimdir = expand(g:myvimdir)

" }}}
" PLUGINS {{{
" plugin config files can be found under g:myvimdir/plugin_configs
" press <Enter> on a line below to goto its config file

" setup vim-plug
call plug#begin()

" FILE/BUFFER PLUGINS {{{

Plug 'tpope/vim-eunuch'     " shell commands, e.g. :Remove & :Move & :Chmod
Plug 'tpope/vim-fugitive'   " vim + git integration
" Plug 'yegappan/mru'         " most recent file list
Plug 'auwsmit/mru', { 'branch': 'personal-use' }
Plug 'justinmk/vim-gtfo'    " open gui explorer or terminal
Plug 'justinmk/vim-dirvish' " minimal file explorer
Plug 'preservim/nerdtree',  " file tree viewer
Plug 'junegunn/fzf',        " general fuzzy finder
      \ { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'     " fzf + vim integration
Plug 'mhinz/vim-sayonara', { 'on': 'Sayonara' } " simple buffer/window closing
Plug 'majutsushi/Tagbar',  { 'on': 'TagbarToggle' } " tag explorer
Plug 'nvim-lua/plenary.nvim'
Plug 'ThePrimeagen/harpoon', { 'branch': 'harpoon2' }
" Plug 'Y:\Git\vim-spear'
Plug 'auwsmit/vim-spear'

" }}}
" OPERATOR PLUGINS {{{

Plug 'tpope/vim-commentary'   " comment mappings
Plug 'machakann/vim-sandwich' " modify surrounding text eg: () and ''
Plug 'tommcdo/vim-exchange'   " exchange two pieces of text

" }}}
" TEXT OBJECT PLUGINS {{{

Plug 'kana/vim-niceblock'
Plug 'kana/vim-textobj-user'         |
      \ Plug 'kana/vim-textobj-line'  |
      \ Plug 'kana/vim-textobj-entire' |
      \ Plug 'kana/vim-textobj-indent'  |
      \ Plug 'kana/vim-textobj-function' |
      \ Plug 'coderifous/textobj-word-column.vim'
Plug 'junegunn/vim-after-object'

" " }}}
" MOTION/NAVIGATION PLUGINS {{{

Plug 'chaoren/vim-wordmotion'    " makes vim's 'word's more precise
Plug 'auwsmit/vim-ipmotion'      " { } move over folds
Plug 'romainl/vim-cool'          " autoclear search highlighting
" Plug 'henrik/vim-indexed-search' " show search count & centered search

" " }}}
" COMPLETION/SNIPPET PLUGINS {{{

Plug 'ervandew/supertab'  " tab autocomplete
Plug 'github/copilot.vim'           " AI suggestions
Plug 'DanBradbury/copilot-chat.vim' " AI chat window
" if s:has_python
"   Plug 'SirVer/UltiSnips' " snippets manager
" endif

" }}}
" FORMAT/SYNTAX PLUGINS {{{

Plug 'nicwest/vim-camelsnek' " convert between camel and snake case
Plug 'justinmk/vim-syntax-extra', { 'for': ['c', 'cpp'] } " additional syntax highlighting for C/C++
Plug 'junegunn/vim-easy-align',   { 'on': ['<Plug>(EasyAlign)', 'EasyAlign'] } " align text operator
" Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}

" " }}}
" APPEARANCE/UI PLUGINS {{{

Plug 'xtal8/traces.vim'            " previews patterns for ex commands
Plug 'auwsmit/baddoggo'            " personal fork of Bad Wolf by Steve Losh
Plug 'auwsmit/vim-active-numbers'  " line numbers follow the current window
Plug 'itchyny/lightline.vim'       " prettier statusbar
Plug 'junegunn/goyo.vim',          " distraction free editing
Plug 'Yggdroot/indentLine',        " indent indicators
" Plug 'catgoose/nvim-colorizer.lua' " highlight colorcodes
" Plug 'junegunn/rainbow_parentheses.vim'
" Plug 'HiPhish/rainbow-delimiters.nvim'

" }}}
" MISC/CONVENIENCE PLUGINS " {{{

Plug 'romainl/vim-qf'        " sensible quickfix improvements
Plug 'junegunn/vim-peekaboo' " preview registers
Plug 'tpope/vim-rsi'         " readline key maps for cmd and ins mode
Plug 'tpope/vim-repeat'      " allows plugins to . repeat easier
Plug 'tpope/vim-sleuth'      " auto-detect tab settings per-file
" Plug 'tpope/vim-unimpaired'  " many useful [x/]x mappings
Plug 'auwsmit/vim-unimpaired', { 'branch': 'readonly-register-paste' }
Plug 'Konfekt/FastFold'         " optimize how Vim updates folds
Plug 'farmergreg/vim-lastplace' " reopen files at last position
Plug 'xolox/vim-session'        " simplified session management
let g:session_autosave = 0      " no auto-save prompt on first install
Plug 'xolox/vim-misc'           " vim-session dependency
Plug 'mbbill/undotree'          " visual undo tree
Plug 'vimwiki/vimwiki'          " for taking and organizing notes
Plug 'junegunn/gv.vim', { 'on': 'GV' } " git commit browser
Plug 'ludovicchabant/vim-gutentags' " auto-generate and update tags

" }}}

" initialize vim-plug plugins
call plug#end()

" Source plugin configs {{{
fun! SourcePluginConfigs()
  let configs = glob(g:myvimdir.'/plugin_configs/*',0,1)
  for config in configs
    let plugin_name = fnamemodify(config,':t')[:-5]
    let type = config[-3:]
    " skip lua configs for vim
    if !s:is_nvim && type == 'lua'
      continue
    endif
    let slash = s:is_windows ? '\' : '/'
    let plugin_dir = g:myvimdir.'/plugged/'.plugin_name
    let src = (type == 'vim') ? 'source ' : 'luafile '
    " if plugin is currently installed
    if isdirectory(plugin_dir)
      exec src . config
    endif
  endfor
endfun
call SourcePluginConfigs()
" }}}

" }}}
" GENERAL SETTINGS {{{

" convenience/quality of life
set incsearch
set ignorecase smartcase " be careful with :g and :s
set path+=**
set virtualedit=all
set clipboard^=unnamed,unnamedplus " make system clipboard the default register
set timeoutlen=3000

" sensible
set hidden
set autoread
set gdefault
set lazyredraw
set showcmd
set nostartofline
set modeline
set sidescroll=8
set backspace=indent,eol,start
set history=10000
set undolevels=10000
set synmaxcol=1024
set nrformats-=octal
set sessionoptions-=options " only save local options
set foldopen-=block
silent! set mouse=a
set vb t_vb=
if exists('&belloff')
  set belloff=all
endif

" completion
set complete=.,w,b,t " ignore unloaded buffers for autocomplete
set wildmenu
set wildmode=full
silent! set wildoptions+=fuzzy
set wildignore+=.hg,.git,.svn                    " Version control
set wildignore+=*.aux,*.out,*.toc                " LaTeX intermediate files
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg   " binary images
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
set wildignore+=*.spl                            " compiled spelling word lists
set wildignore+=*.sw?                            " Vim swap files
set wildignore+=*.DS_Store                       " OSX garbage

" backups, swapfiles, & undofiles in one place
let s:tempdir=expand(g:myvimdir .(s:is_nvim ? '/neotmp/' : '/tmp/'))
if !isdirectory(s:tempdir)
  call mkdir(s:tempdir, 'p')
  call mkdir(s:tempdir.'backup', 'p')
  call mkdir(s:tempdir.'swap', 'p')
  call mkdir(s:tempdir.'undo', 'p')
endif
set backup
let &backupdir=s:tempdir .'backup//'
set swapfile
let &directory=s:tempdir .'swap//'
if has('persistent_undo')
  set undofile
  let &undodir=s:tempdir .'undo//'
endif

" }}}
" APPEARANCE AND FORMATTING {{{
" some settings will be overwritten when certain filetypes are detected
" see: filetype-indent-on, ftplugins, & after-directory

" indenting/formatting
set autoindent smartindent " try cindent instead
set encoding=utf-8

" default tab settings (vim-sleuth will usually override this)
set shiftwidth=4 softtabstop=-1 expandtab
set smarttab

" UI/aesthetic
set number relativenumber
set numberwidth=1
set cursorline
set list listchars=tab:»\ ,extends:›,precedes:‹,nbsp:·,trail:■
set linebreak
if has('linebreak')
  set showbreak=«
  set breakindent
else
  set listchars+=eol:¬
endif
set shortmess-=S  " show search count [1/99]
set shortmess+=mrF
" set cpoptions+=$
set foldlevel=999 " start with folds closed
set foldmethod=indent
set guioptions=

" statusline when lightline is disabled or unavailable
exec 'set statusline=\ %<%f\ %h%m%r%=%y\ [%P]\ [%l,%v]'

silent! colorscheme baddoggo
fun! VimrcColorFallback(color) abort
  if !exists('g:colors_name')
    exec 'silent! colorscheme '. a:color
  endif
endfun
call VimrcColorFallback('unokai')
call VimrcColorFallback('habamax')
call VimrcColorFallback('desert')

" trying out a fancy custom font
let &guifont = 'Fantasque Sans Mono:h'.(s:is_windows ? 10 : 11)

" sensible
set hlsearch
set laststatus=2 ruler
set splitright
if has('termguicolors')
  set termguicolors
endif
" Disable Background Color Erase (BCE) so that color schemes
" render properly when inside 256-color tmux and GNU screen.
if &term =~ '256color'
  set t_ut=
endif

" bring back cursor colors in nvim
if s:is_nvim
  set guicursor=n-v-c-sm:block-Cursor/lCursor,i-ci-ve:ver25-Cursor/lCursor,
        \r-cr-o:hor20-Cursor/lCursor,t:block-blinkon500-blinkoff500-TermCursor
endif

" fix weird cursor issues on windows terminals
" needs to be after termguicolors and t_Co are set
if !s:is_nvim && s:is_windows
  let &t_SI = "\e[6 q"
  let &t_SR = "\e[4 q"
  let &t_EI = "\e[2 q"
  let &t_ti .= "\e[1 q"
  let &t_te .= "\e[0 q"
endif

" Neovide config
if exists("g:neovide")
  " no distracting animations
  let g:neovide_cursor_animation_length = 0
  let g:neovide_scroll_animation_length = 0
endif

augroup vimrc_appearance_and_formatting
  au!
  " this makes the trailing space indicator invisible
  " while typing, otherwise it can be distracting
  au InsertEnter * set listchars-=trail:■
  au InsertLeave * set listchars+=trail:■

  " resize vim-windows when program window is resized
  au VimResized * wincmd =

  if s:is_windows
    " Maximize window
    au GUIEnter * simalt ~x
  endif
augroup END

" }}}
" KEY MAPPINGS {{{
" plugin related maps can be found in g:myvimdir/plugin_configs

" REMAPS OF DEFAULTS {{{
" it's good to remember these in case I'm stuck with vanilla vi/vim
" (more specifically, remaps of *important* defaults)

" go back to last buffer
nnoremap <BS> <C-^>

" Y yanks until eol, more like D and C
" yy still yanks the whole line
nnoremap Y y$

" U as a more sensible redo
nnoremap U <C-r>

" Q to replay q register
nnoremap Q @q
xnoremap Q :normal @q<CR>

" linewise register replay (nvim default for vim)
xnoremap <expr> @ mode() ==# 'V' ? ':normal! @'.getcharstr().'<CR>' : '@'

" Ctrl-l also clears search highlighting
nnoremap <silent> <C-l> :nohlsearch<CR><C-l>
xnoremap <silent> <C-l> :<C-u>nohlsearch<CR><C-l>gv

" Split line (opposite of J) {{{
fun! s:SplitLine()
  exec "normal! i\<CR>\<Esc>^gk"
  silent! substitute/\v +$//
  silent! nohlsearch
  call histdel("search", -1)
  normal! $
endfun
" works with tpope's repeat.vim
nnoremap <silent> <Plug>(MySplitLine) :call <SID>SplitLine()<CR>
      \ :silent! call repeat#set("\<Plug>(MySplitLine)", v:count)<CR>
" }}}
nmap S <Plug>(MySplitLine)

" make a new jump if scrolled far away
let s:prev_scroll_line = -1
fun! s:ScrollMakesJump(type)
  let distance_til_jump = 150
  if line('.') != s:prev_scroll_line ||
        \ abs(line('.') - line("''")) >= distance_til_jump
    norm m'
  endif
  exec 'exec "normal! \<C-'.a:type.'>"'
  let s:prev_scroll_line = line('.')
endfun
nnoremap <silent> <C-u> :call <SID>ScrollMakesJump('u')<CR>
nnoremap <silent> <C-d> :call <SID>ScrollMakesJump('d')<CR>
nnoremap <silent> <C-b> :call <SID>ScrollMakesJump('b')<CR>
nnoremap <silent> <C-f> :call <SID>ScrollMakesJump('f')<CR>

" fast 1/4th page scroll
fun! s:TabScroll(type)
  let t_scroll = &scroll
  let &scroll = winheight(winnr()) / 4
  exec 'normal ' a:type == 'd' ? "\<C-d>" : "\<C-u>"
  let &scroll = t_scroll
endfun
nnoremap <silent> <Tab>   :call <SID>TabScroll('d')<CR>
nnoremap <silent> <S-Tab> :call <SID>TabScroll('u')<CR>

" new jump list mnemonic: previous, next
" (frees up CTRL-i AKA Tab)
nnoremap <silent> <C-p> <C-o>zvzz
nnoremap <silent> <C-n> <C-i>zvzz

" open current file's directory
nnoremap - :exec 'edit '.expand('%:h')<CR>

" open current working directory
nnoremap + :edit .<CR>

" | and _ for split windows
nnoremap <expr><silent> \| !v:count ? "<C-w>v<C-w><Right>" : '\|'
nnoremap <expr><silent> _  !v:count ? "<C-w>s<C-w><Down>"  : '_'

" no accidental command window (q:) {{{
" explanation: using 'nnoremap q: <NOP>' gives my
" 'q to quit' map a slight pause, so this is a convoluted
" way of disabling q: without using any map commands.
" also :<C-f> still works
augroup vimrc_cmdwin_map
  au!
  let g:cmdwinmap = 0
  au CmdwinLeave * let g:cmdwinmap = 0
  au CmdwinEnter * exec expand(g:cmdwinmap ? '' : 'quit')
augroup END
fun! s:FixCtrlF_SetAutocmd(type)
  let g:cmdwinmap = 1
  augroup vimrc_fix_cmd_ctrl_f
    au!
    au CmdlineLeave * call <SID>FixCtrlF_ClearAutocmd()
  augroup END
  " re-enter command-mode
  call feedkeys(a:type,'tn')
endfun
fun! s:FixCtrlF_ClearAutocmd()
  let g:cmdwinmap = 0
  augroup vimrc_fix_cmd_ctrl_f
    au!
  augroup END
endfun
" zee history and zee commands, oui oui }}}
nnoremap z: :let g:cmdwinmap=1<CR>q:
nnoremap z/ :let g:cmdwinmap=1<CR>q/
nnoremap <silent> : :call <SID>FixCtrlF_SetAutocmd(':')<CR>
xnoremap <silent> : :<C-u>call <SID>FixCtrlF_SetAutocmd(':')<CR>gv
nnoremap <silent> / :call <SID>FixCtrlF_SetAutocmd('/')<CR>
xnoremap <silent> / :<C-u>call <SID>FixCtrlF_SetAutocmd('/')<CR>gv

" move by wrapped lines instead of line numbers, unless the motion is counted
" also set a mark for movements across 5 lines or more
nnoremap <expr> j (v:count >= 5 ? "m'" . v:count : '').(v:count? 'j' : 'gj')
nnoremap <expr> k (v:count >= 5 ? "m'" . v:count : '').(v:count? 'k' : 'gk')
xnoremap <expr> j (v:count >= 5 ? "m'" . v:count : '').(v:count? 'j' : 'gj')
xnoremap <expr> k (v:count >= 5 ? "m'" . v:count : '').(v:count? 'k' : 'gk')

" swap gp and p
" jump to the end of pasted text by default
" useful for pasting multiple lines of text
noremap p p`]
noremap gp p

" move selected lines up or down with no reindenting {{{
" we'll see of I actually use this
fun! s:MoveLines(dir)
  let [old_reg, old_col] = [@", col('.')-1]
  normal! gv
  exec 'normal! '. (a:dir == 'down' ? 'dp' : 'dkP')
  normal! '[V']
  exec 'normal! 0'. (old_col != 0 ? (old_col .'l') : '')
  let @" = old_reg
endfun
" }}}
xnoremap <Up> <Esc>:call <SID>MoveLines('up')<CR>
xnoremap <Down> <Esc>:call <SID>MoveLines('down')<CR>

" <CR> in vimrc to edit or create plugin config {{{
" press Enter on [Plug 'author/plugin'] to create or open a local config file
fun! s:GotoPluginConfig()
  if getline('.') =~ "Plug '.*'"
    " this pattern matches whatever is after the
    " last slash in single quotes on a Plug line
    let pattern = "Plug.*'[^']*[\\/]\\zs[^']*\\ze'"
    let name = matchstr(getline('.'), pattern)
    let path_to_plugin = resolve(g:myvimdir).'/plugin_configs/'.name
    if filereadable(path_to_plugin.'.vim')
      echo 'Found config for ' . name
      exec 'edit ' . fnameescape(path_to_plugin.'.vim')
    elseif filereadable(path_to_plugin.'.lua')
      echo 'Found config for ' . name
      exec 'edit ' . fnameescape(path_to_plugin.'.lua')
    else
      let msg = 'No plugin config found. Would you like to create one?'
      let choice1 = confirm(msg,"&No\n&yes",1)
      if choice1 == 2
        let choice2 = confirm('',"&Vim\nor &lua",1)
        let ftype = choice2 == 1 ? '.vim' : '.lua'
        redraw
        echo 'Editing local config for ' . name
        exec 'edit ' . fnameescape(path_to_plugin.ftype)
      endif
    endif
  endif
endfun

fun! s:PluginConfigMapper()
  let current_file = expand('%:t')
  if current_file =~ 'init.vim' || current_file == 'vimrc'
    nnoremap <silent><buffer> <CR> :call <SID>GotoPluginConfig()<CR>
  endif
endfun

augroup vimrc_view_plugin_config
  au!
  au FileType vim call <SID>PluginConfigMapper()
augroup END
" }}}

" silence error for non-existing tags or accidental <C-]>
nnoremap <C-]> :exec "silent! normal! \<C<kMinus>]>"<CR>

" }}}
" STANDARD MAPS {{{

" :help works fine, thanks
noremap <F1> <NOP>
inoremap <F1> <NOP>
" Emacs blasphemy
inoremap <C-g> <Esc>
cnoremap <C-g> <C-c>
xnoremap <C-g> <Esc>

" don't run commands without my consent
cnoremap <Esc> <C-c>
cnoremap <Esc> <C-c>

" from tpope's rsi
inoremap <C-a> <C-o>^
inoremap <expr> <C-e> col('.')>strlen(getline('.'))<Bar><Bar>pumvisible()?"\<lt>C-E>":"\<lt>End>"

" " expand-o-brackets
" inoremap {<Tab> {<CR>}<Esc>O
" inoremap {;<Tab> {<CR>};<Esc>O

" change directories (minor time saver)
nnoremap cd :cd<Space>

" alt quit
nnoremap <C-S-Q> :qall<CR>

" quickly manage buffers {{{
fun! s:BuflistProperEsc()
  " otherwise you need to press esc twice
  cnoremap <silent> <buffer> <Esc> <C-u><Esc><Esc>:call <SID>BuflistRemoveMaps()<CR>
  cnoremap <silent> <buffer> <C-[> <C-u><Esc><Esc>:call <SID>BuflistRemoveMaps()<CR>
  cnoremap <silent> <buffer> <CR> <CR>:call <SID>BuflistRemoveMaps()<CR>
endfun
fun! s:BuflistRemoveMaps()
  silent! cunmap <buffer> <Esc>
  silent! cunmap <buffer> <C-[>
  silent! cunmap <buffer> <CR>
endfun
" }}}
nnoremap gb :call <SID>BuflistProperEsc()<CR>:ls<CR>:b<Space>
nnoremap gB :call <SID>BuflistProperEsc()<CR>:ls!<CR>:b<Space>

" :help under the cursor, mnemonic is 'Get Help' {{{
fun! s:HelpWithHistory(type)
  let text = ''
  if a:type == 'visual'
    let text = getline('.')[col("'<")-1:col("'>")-1]
  elseif a:type == 'word'
    let text = expand('<cword>')
  endif
  " check for 'option's
  if getline('.') =~ "^\s*set" | let text = "'". text | endif
  let cmd = 'help ' . text
  call histadd(':', cmd)
  exec cmd
endfun
" }}}
nnoremap gh :call <SID>HelpWithHistory('word')<CR>
xnoremap gh :call <SID>HelpWithHistory('visual')<CR>

" resizing windows
noremap <S-Left>  10<C-w><
noremap <S-Up>    10<C-w>+
noremap <S-Down>  10<C-w>-
noremap <S-Right> 10<C-w>>
noremap <C-S-Left>  <C-w><
noremap <C-S-Up>    <C-w>+
noremap <C-S-Down>  <C-w>-
noremap <C-S-Right> <C-w>>

" resize font for gui {{{
" not compatible with multiple guifont options
let s:default_size = matchstr(&guifont, ':h\zs\d\+\ze')
if s:default_size == '' | let s:default_size = 12 | endif
fun! s:CheckGuiFont()
  if &guifont | return | endif
  let s:gfont = (s:is_windows ? 'Consolas' : 'Monospace')
  let s:gfont .= ':h'.s:default_size
  let &guifont = (&guifont == '') ? (s:gfont) :
        \ (&guifont.':h'.s:default_size)
endfun
call s:CheckGuiFont()
fun! s:ChangeFontSize(type)
  call s:CheckGuiFont()
  let [font, size] = [&guifont, -1]
  if a:type == '0'
    let size = s:default_size
  else
    let size = matchstr(font, '\d\+$')
    if size == '' | let size = s:default_size | endif
    let size = size + (a:type == '+' ? 1 : -1)
    if size == 0  | return | endif
    echom 'size: '.size
  endif
  let font = matchstr(font, '[^:]*')
  let &guifont = font.':h'.size
endfun
if has('gui_running') " might need different maps for gvim
  nnoremap <silent> <C-0> :call <SID>ChangeFontSize('0')<CR>
  nnoremap <silent> <C-=> :call <SID>ChangeFontSize('+')<CR>
  nnoremap <silent> <C--> :call <SID>ChangeFontSize('-')<CR>
endif
" }}}

" unimpaired.vim inspired {{{
" toggle centering the cursor
nnoremap yoz :let &scrolloff=999-&scrolloff<CR>:set so?<CR>

" toggle both relative and normal numbers
nnoremap yoN :exec 'set '.(!&nu && !&rnu ? 'nu rnu' : 'nonu nornu')<CR>
      \:echo 'set '.(&nu ? 'number relativenumber' : 'nonumber norelativenumber')<CR>

" toggle syntax highlighting {{{
" useful when Vim is crippled by its inefficient highlighting
fun! s:ToggleSyntaxHighlighting() abort
  let [folds, prev_fold_closed] = [&foldlevel, foldclosed('.')]
  exec 'syntax '.(exists("g:syntax_on") ? 'off' : 'enable')
  let &foldlevel=folds
  while (foldclosed('.') != -1) && (foldclosed('.') != prev_fold_closed)
    normal! za
  endwhile
endfun
command! ToggleSyntax call <SID>ToggleSyntaxHighlighting()
" }}}
nnoremap yoS :call <SID>ToggleSyntaxHighlighting()<CR>
" }}}

" improved help mappings {{{
fun! s:HelpSearch(dir, origin = [])
  let link_match = '|\S\+|'
  let opt_match = '\*\@<!''\l\l\+'''
  let old_pos = getpos('.')
  call search(link_match.'\|'.opt_match, a:dir)
  let new_pos = getpos('.')
  if getline('.')[0] == "'"
    " skip lines starting with '
    if (new_pos != old_pos)
      call s:HelpSearch(a:dir, a:origin)
    else
      setpos('.', ((a:origin != []) ? a:origin : old_pos))
    endif
  endif
endfun
fun! s:HelpMaps() abort
  if &buftype == 'help'
    nnoremap <buffer> q :bd<CR>
    " navigate links
    nnoremap <silent><buffer> <C-j> m':call <SID>HelpSearch('')<CR>
    nnoremap <silent><buffer> <C-k> m':call <SID>HelpSearch('b')<CR>
    nnoremap <buffer> <CR> <C-]>
  endif
endfun
augroup vimrc_improved_help_maps
  au!
  au BufEnter *.txt call s:HelpMaps()
augroup END
" }}}

" Source vimscript operator {{{
" Nice for quick vimscript testing.
fun! s:SourceVimscript(type) abort
  let sel_save = &selection
  let &selection = "inclusive"
  let reg_save = @"
  if a:type == 'line'
    silent exec "normal! '[V']y"
  elseif a:type == 'char'
    silent exec "normal! `[v`]y"
  elseif a:type == "visual"
    silent exec "normal! gvy"
  elseif a:type == "currentline"
    silent exec "normal! yy"
  endif
  let @" = substitute(@", '\n\s*\\', '', 'g')
  " source the content
  @"
  if (g:syntax_on) | syntax on | endif
  let &selection = sel_save
  let @" = reg_save
endfun
" }}}
nnoremap <silent> g: :set opfunc=<SID>SourceVimscript<CR>g@
xnoremap <silent> g: :<C-u>call <SID>SourceVimscript("visual")<CR>
nnoremap <silent> g:: :call <SID>SourceVimscript("currentline")<CR>

" Delete & Replace operator {{{
" (credit to justinmk's init.vim)
" why?
" - repeatable
" - faster/more convenient than visual-replace
" - does not modify ' mark
" - DWIM behavior for linewise => characterwise
func! s:trimws_ml(s) abort "trim whitespace across multiple lines
  return substitute(a:s, '^\_s*\(.\{-}\)\_s*$', '\1', '')
endf
let s:rr_reg = '"'
func! s:set_reg(reg_name) abort
  let s:rr_reg = a:reg_name
endf
func! s:replace_without_yank(type) abort
  let rr_orig = getreg(s:rr_reg, 1) "save registers and types to restore later.
  let rr_type = getregtype(s:rr_reg)
  let ur_orig = getreg('"', 1)
  let ur_type = getregtype('"')
  let sel_save = &selection
  let &selection = "inclusive"
  let replace_curlin = (1==col("'[") && (col('$')==1 || col('$')==(col("']")+1)) && line("'[")==line("']"))

  if a:type ==? 'line' || replace_curlin
    exec "keepjumps normal! '[V']\"".s:rr_reg."p"
  elseif a:type ==? 'block'
    exec "keepjumps normal! `[\<C-v>`]\"".s:rr_reg."p"
  elseif a:type == 'visual'
    exec "keepjumps normal! gv\"".s:rr_reg."p"
  else
    "DWIM: if pasting linewise contents in a _characterwise_ motion, trim
    "      surrounding whitespace from the content to be pasted.
    if rr_type ==# "V"
      call setreg(s:rr_reg, s:trimws_ml(rr_orig), "v")
    endif
    exec "keepjumps normal! `[v`]\"".s:rr_reg."p"
  endif

  let &selection = sel_save
  call setreg('"',      ur_orig, ur_type)
  call setreg(s:rr_reg, rr_orig, rr_type)
endf

" }}}
nnoremap <silent> dr  :<C-u>call <SID>set_reg(v:register)<Bar>set opfunc=<SID>replace_without_yank<CR>g@
nnoremap <silent> drr :<C-u>call <SID>set_reg(v:register)<CR>0:<C-u>set opfunc=<SID>replace_without_yank<CR>g@$
xnoremap <silent> R :<C-u>call <SID>set_reg(v:register)<Bar>call <SID>replace_without_yank('visual')<CR>

" %% expands to current buffer file name
" :: expands to current buffer file path
cnoremap %% <C-r>=fnameescape(expand('%'))<CR>
if s:is_windows
  cnoremap :: <C-r>=fnameescape(substitute(expand('%:p:h'),'/','\','g'))<CR>\
else
  cnoremap :: <C-r>=fnameescape(expand('%:p:h'))<CR>/
endif

" browse search results while searching with tab/s-tab
cnoremap <expr>  <Tab>    getcmdtype() =~ '[?/]' ? '<C-g>' : feedkeys('<Tab>', 'int')[1]
cnoremap <expr>  <S-Tab>  getcmdtype() =~ '[?/]' ? '<C-t>' : feedkeys('<S-Tab>', 'int')[1]

" visually select the last change or yank
nnoremap gV `[v`]

" consistent and sane terminal escape {{{
" - press <Esc> to exit terminal mode
" - press <C-\><C-\> to send an <Esc> to the terminal
if s:is_nvim
  let s:t_esc = '<C-\><C-n>'
elseif has('terminal')
  let s:t_esc = '<C-w>N'
endif
tnoremap <C-\><C-\> <Esc>
" }}}
" select the last :terminal's output, similar to `:read!` {{{
" - allows for gV (see above mapping) to select
"   the last command's output as the last change
let s:vimrc_term_cmd_mark = 0
fun! s:TermMakeCmdMark(is_start)
  if !a:is_start && !s:vimrc_term_cmd_mark | return | endif
  if a:is_start == 1
    call setpos("'[", [0, line('.')+1, 0, 0])
    let s:vimrc_term_cmd_mark = 1
  else
    call setpos("']", [0, line('.')-1, col([line('.')-1,'$']), 0])
    let s:vimrc_term_cmd_mark = 0
  endif
endfun
let s:tmark_start = ":call <SID>TermMakeCmdMark(1)"
let s:tmark_end   = ":call <SID>TermMakeCmdMark(0)"
exec 'tnoremap <silent> <CR>  '. s:t_esc . s:tmark_start .'<CR>a<CR>'
let s:t_esc .= s:tmark_end.'<CR>'
exec 'tnoremap <silent> <Esc> '. s:t_esc
exec 'tnoremap <silent> <C-[> '. s:t_esc
exec 'tnoremap <silent> <C-g> '. s:t_esc
" }}}

" minor terminal shortcut to run commands from normal mode
augroup vimrc_term_run_shortcut
  au!
  exec 'au Term'.(s:is_nvim ? '' : 'inal').'Open * nnoremap <buffer> <CR> a<CR>'
augroup END

" automatically create undo breaks in insert mode {{{
" it's better to just build the habit of exiting and entering
" insert mode in small chunks, but still gonna try this out.
fun! s:SetupInsertUndoBreaks()
  inoremap <buffer> . .<C-g>u
  inoremap <buffer> , ,<C-g>u
  inoremap <buffer> ! !<C-g>u
  inoremap <buffer> ? ?<C-g>u
endfun
augroup vimrc_auto_insert_undo_breaks
  au!
  au FileType txt,markdown call <SID>SetupInsertUndoBreaks()
augroup END
"}}}

" }}}
" LEADER MAPS {{{
" space is my leader

" lemme hold shift for capital leader maps
map <S-Space> <Space>
map <S-Space><S-Space> <Space><Space>

" don't move my cursor plz
noremap <Space> <NOP>

" shortcuts
" windows      🐄     🐄
nnoremap <Space>c <C-w>c
nnoremap <Space>o <C-w>o
nnoremap <Space>w <C-w>w

" vim-plug shortcuts {{{
fun! s:VimPlugShortcuts()
  let choice = confirm('vim-plug:', "&Install\n&Update\n&Clean\n&Quit",4)
  if     choice == 1 | PlugInstall
  elseif choice == 2 | PlugUpdate
  elseif choice == 3 | PlugClean | endif
endfun
" }}}
nnoremap <silent> <Space>P :call <SID>VimPlugShortcuts()<CR>

" Go to previous window {{{
" reliable CTRL-W_p (if previous window is gone, move to next window)
fun! s:GotoPreviousWindow()
  let cur_win = winnr() | wincmd p
  if winnr() == cur_win | wincmd w | endif
endfun
" }}}
nnoremap <silent> <Space><Tab> :call <SID>GotoPreviousWindow()<CR>

" check if FZF command search is mapped
if maparg('<Space><Space>','n') == ''
  nnoremap <Space><Space> :
endif

" edit vimrc, resolve symlinks to goto dotfiles repo
" I've probably pressed this command over a million times
nnoremap <silent><Space>v :exec 'edit '.resolve($MYVIMRC)<CR>
nnoremap <silent><Space>V :exec 'tabedit '.resolve($MYVIMRC)<CR>

" quick scratch buffers
let s:scratch_bufn = 0
fun! s:CreateScratchBuffer()
  let ex = ':enew | setlocal bt=nofile bh=hide noswf'
  let ex .= ' | file Scratch \#'.s:scratch_bufn | let s:scratch_bufn += 1
  return ex . ' | set ft='
endfun
nnoremap <expr> <Space>s <SID>CreateScratchBuffer()

" :terminal consistency with vim and nvim {{{
if s:is_nvim
  let s:space_t_map = 'nnoremap <Space>t :split +term\ '
else
  let s:space_t_map = 'nnoremap <Space>t :term ++close '
endif
" let s:space_t_map .= (s:is_windows && executable('wsl') ? 'wsl.exe' : '') .'<CR>'
let s:space_t_map .= (s:is_windows ? 'powershell.exe' : '') .'<CR>'
if s:is_nvim
  augroup vimrc_term_edit_on_open
    au!
    au TermOpen * normal! a
  augroup END
endif
" }}}
exec s:space_t_map

" toggle location & quickfix lists {{{
" (from vim tips wiki)
fun! GetBufferList() abort
  redir =>buflist
  silent! ls!
  redir END
  return buflist
endfun
fun! ToggleList(bufname, pfx) abort
  let buflist = GetBufferList()
  for bufnum in map(filter(split(buflist, '\n'), 'v:val =~ "'.a:bufname.'"'),
        \           'str2nr(matchstr(v:val, "\\d\\+"))')
    if bufwinnr(bufnum) != -1
      execute(a:pfx.'close')
      return
    endif
  endfor
  if (a:pfx == 'l' && len(getloclist(0)) == 0) ||
        \ (a:pfx == 'c' && len(getqflist()) == 0)
    echohl ErrorMsg | echo a:bufname." is empty." | echohl None
    return
  endif
  let winnr = winnr()
  execute(a:pfx.'open')
  if winnr() != winnr
    wincmd p
  endif
endfun
" }}}
nnoremap <silent> <Space>l :call ToggleList("Location List", 'l')<CR>
nnoremap <silent> <Space>q :call ToggleList("Quickfix List", 'c')<CR>

" paste last ex command output
nnoremap <Space>;p :put =execute('<C-r>:')<CR>

" quickly compile and run game
nnoremap <Space>m :make<CR>
nnoremap <Space>! :!game<CR>
nnoremap <Space>M :make<CR>:!game<CR>

" populate the location list with last search results
" useful for seeing the exact number of matches for big searches
nnoremap <Space>/ :lvim //g %<CR>

" weird idea: <nop> all unused space mappings for safety. {{{
" - sometimes I accidentally press <space>C and change the line, for example
fun! s:SafeSpaceMaps()
  let keys = 'qwertyuiop[]asdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM'
  let keys .= '`~!@#$%^&*()-=_+[]{};:''"<,>./?'
  for i in range(0,len(keys)-1)
    let map = '<Space>'.keys[i]
    if maparg(map, 'n') == ''
      exec 'nnoremap '. map .' <NOP>'
    endif
  endfor
endfun
augroup vimrc_safespace_maps " teehee
  au!
  au VimEnter * call s:SafeSpaceMaps()
augroup END
" }}}

" }}}

" }}}
" MISCELLANEOUS {{{
" Other functions, commands, settings,
" etc.  that don't fit elsewhere go here

" DoubleView {{{
" Vertically split the current buffer into two windows which will stay
" scroll-bound together.  Allows you to see twice as much as before!
" (disables the wrap setting and expands folds to work better)
" (PS: this is kind of janky, but I like it anyway)
fun! s:DoubleView() abort
  let DV_so=&scrolloff
  set scrolloff=0 noscrollbind nowrap nofoldenable
  exec "normal! m`\<C-b>"
  botright vsplit
  normal! Ljzt
  windo setl scrollbind
  let &scrolloff=DV_so
  exec "normal! \<C-w>p``"
endfun " }}}
command! DoubleView call <SID>DoubleView()

" TODO: make these more robust or find alternatives
" very basic custom text objects
" 'inside symbol' and 'a symbol'
let s:separators = exists('g:loaded_targets') ? [ '`', '%']
      \ : [ '_', '.', ':', ',', ';', '<Bar>', '/', '<Bslash>', '*', '+', '%', '`' ]
for char in s:separators
  exec 'xnoremap i' . char . ' :<C-u>normal! T' . char . 'vt' . char . '<CR>'
  exec 'onoremap i' . char . ' :normal vi' . char . '<CR>'
  exec 'xnoremap a' . char . ' :<C-u>normal! F' . char . 'vf' . char . '<CR>'
  exec 'onoremap a' . char . ' :normal va' . char . '<CR>'
endfor

" Clear Trailing White spaces
cabbrev ctw s/\s\+$//e

" }}}
